schema {
  query: Query
  subscription: Subscription
}

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

type Account {
  apps(first: Int = 100, orderBy: App_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: App_filter): [App!]!
  balance: BigDecimal!
  contributions(first: Int = 100, orderBy: Contribution_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Contribution_filter): [Contribution!]!
  datasets(first: Int = 100, orderBy: Dataset_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Dataset_filter): [Dataset!]!
  dealBeneficiary(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  dealCallback(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  dealRequester(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  events(first: Int = 100, orderBy: AccountEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AccountEvent_filter): [AccountEvent!]!
  frozen: BigDecimal!
  id: ID!
  orderBeneficiary(first: Int = 100, orderBy: RequestOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RequestOrder_filter): [RequestOrder!]!
  orderCallback(first: Int = 100, orderBy: RequestOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RequestOrder_filter): [RequestOrder!]!
  orderRequester(first: Int = 100, orderBy: RequestOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RequestOrder_filter): [RequestOrder!]!
  score: BigInt!
  taskRequester(first: Int = 100, orderBy: Task_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Task_filter): [Task!]!
  transactions(first: Int = 100, orderBy: Transaction_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Transaction_filter): [Transaction!]!
  transfersFrom(first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Transfer_filter): [Transfer!]!
  transfersTo(first: Int = 100, orderBy: Transfer_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Transfer_filter): [Transfer!]!
  workerpools(first: Int = 100, orderBy: Workerpool_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Workerpool_filter): [Workerpool!]!
}

interface AccountEvent {
  account: Account!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
}

input AccountEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [AccountEvent_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [AccountEvent_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum AccountEvent_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input Account_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Account_filter]
  apps_: App_filter
  balance: BigDecimal
  balance_gt: BigDecimal
  balance_gte: BigDecimal
  balance_in: [BigDecimal!]
  balance_lt: BigDecimal
  balance_lte: BigDecimal
  balance_not: BigDecimal
  balance_not_in: [BigDecimal!]
  contributions_: Contribution_filter
  datasets_: Dataset_filter
  dealBeneficiary_: Deal_filter
  dealCallback_: Deal_filter
  dealRequester_: Deal_filter
  events_: AccountEvent_filter
  frozen: BigDecimal
  frozen_gt: BigDecimal
  frozen_gte: BigDecimal
  frozen_in: [BigDecimal!]
  frozen_lt: BigDecimal
  frozen_lte: BigDecimal
  frozen_not: BigDecimal
  frozen_not_in: [BigDecimal!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Account_filter]
  orderBeneficiary_: RequestOrder_filter
  orderCallback_: RequestOrder_filter
  orderRequester_: RequestOrder_filter
  score: BigInt
  score_gt: BigInt
  score_gte: BigInt
  score_in: [BigInt!]
  score_lt: BigInt
  score_lte: BigInt
  score_not: BigInt
  score_not_in: [BigInt!]
  taskRequester_: Task_filter
  transactions_: Transaction_filter
  transfersFrom_: Transfer_filter
  transfersTo_: Transfer_filter
  workerpools_: Workerpool_filter
}

enum Account_orderBy {
  apps
  balance
  contributions
  datasets
  dealBeneficiary
  dealCallback
  dealRequester
  events
  frozen
  id
  orderBeneficiary
  orderCallback
  orderRequester
  score
  taskRequester
  transactions
  transfersFrom
  transfersTo
  workerpools
}

type AccurateContribution implements AccountEvent {
  account: Account!
  contribution: Contribution!
  id: ID!
  score: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

input AccurateContribution_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [AccurateContribution_filter]
  contribution: String
  contribution_: Contribution_filter
  contribution_contains: String
  contribution_contains_nocase: String
  contribution_ends_with: String
  contribution_ends_with_nocase: String
  contribution_gt: String
  contribution_gte: String
  contribution_in: [String!]
  contribution_lt: String
  contribution_lte: String
  contribution_not: String
  contribution_not_contains: String
  contribution_not_contains_nocase: String
  contribution_not_ends_with: String
  contribution_not_ends_with_nocase: String
  contribution_not_in: [String!]
  contribution_not_starts_with: String
  contribution_not_starts_with_nocase: String
  contribution_starts_with: String
  contribution_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [AccurateContribution_filter]
  score: BigInt
  score_gt: BigInt
  score_gte: BigInt
  score_in: [BigInt!]
  score_lt: BigInt
  score_lte: BigInt
  score_not: BigInt
  score_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum AccurateContribution_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  contribution
  contribution__challenge
  contribution__hash
  contribution__id
  contribution__seal
  contribution__status
  contribution__timestamp
  id
  score
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

enum Aggregation_interval {
  day
  hour
}

type App implements Ressource {
  checksum: Bytes!
  id: ID!
  mrenclave: Bytes!
  multiaddr: Bytes!
  name: String!
  orders(first: Int = 100, orderBy: AppOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AppOrder_filter): [AppOrder!]!
  owner: Account!
  timestamp: BigInt!
  transfers(first: Int = 100, orderBy: AppTransfer_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AppTransfer_filter): [AppTransfer!]!
  type: String!
  usages(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
}

type AppOrder {
  app: App!
  appprice: BigDecimal!
  datasetrestrict: Bytes
  deals(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  id: ID!
  requesterrestrict: Bytes
  salt: Bytes
  sign: Bytes
  tag: Bytes
  volume: BigInt
  workerpoolrestrict: Bytes
}

input AppOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AppOrder_filter]
  app: String
  app_: App_filter
  app_contains: String
  app_contains_nocase: String
  app_ends_with: String
  app_ends_with_nocase: String
  app_gt: String
  app_gte: String
  app_in: [String!]
  app_lt: String
  app_lte: String
  app_not: String
  app_not_contains: String
  app_not_contains_nocase: String
  app_not_ends_with: String
  app_not_ends_with_nocase: String
  app_not_in: [String!]
  app_not_starts_with: String
  app_not_starts_with_nocase: String
  app_starts_with: String
  app_starts_with_nocase: String
  appprice: BigDecimal
  appprice_gt: BigDecimal
  appprice_gte: BigDecimal
  appprice_in: [BigDecimal!]
  appprice_lt: BigDecimal
  appprice_lte: BigDecimal
  appprice_not: BigDecimal
  appprice_not_in: [BigDecimal!]
  datasetrestrict: Bytes
  datasetrestrict_contains: Bytes
  datasetrestrict_gt: Bytes
  datasetrestrict_gte: Bytes
  datasetrestrict_in: [Bytes!]
  datasetrestrict_lt: Bytes
  datasetrestrict_lte: Bytes
  datasetrestrict_not: Bytes
  datasetrestrict_not_contains: Bytes
  datasetrestrict_not_in: [Bytes!]
  deals_: Deal_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [AppOrder_filter]
  requesterrestrict: Bytes
  requesterrestrict_contains: Bytes
  requesterrestrict_gt: Bytes
  requesterrestrict_gte: Bytes
  requesterrestrict_in: [Bytes!]
  requesterrestrict_lt: Bytes
  requesterrestrict_lte: Bytes
  requesterrestrict_not: Bytes
  requesterrestrict_not_contains: Bytes
  requesterrestrict_not_in: [Bytes!]
  salt: Bytes
  salt_contains: Bytes
  salt_gt: Bytes
  salt_gte: Bytes
  salt_in: [Bytes!]
  salt_lt: Bytes
  salt_lte: Bytes
  salt_not: Bytes
  salt_not_contains: Bytes
  salt_not_in: [Bytes!]
  sign: Bytes
  sign_contains: Bytes
  sign_gt: Bytes
  sign_gte: Bytes
  sign_in: [Bytes!]
  sign_lt: Bytes
  sign_lte: Bytes
  sign_not: Bytes
  sign_not_contains: Bytes
  sign_not_in: [Bytes!]
  tag: Bytes
  tag_contains: Bytes
  tag_gt: Bytes
  tag_gte: Bytes
  tag_in: [Bytes!]
  tag_lt: Bytes
  tag_lte: Bytes
  tag_not: Bytes
  tag_not_contains: Bytes
  tag_not_in: [Bytes!]
  volume: BigInt
  volume_gt: BigInt
  volume_gte: BigInt
  volume_in: [BigInt!]
  volume_lt: BigInt
  volume_lte: BigInt
  volume_not: BigInt
  volume_not_in: [BigInt!]
  workerpoolrestrict: Bytes
  workerpoolrestrict_contains: Bytes
  workerpoolrestrict_gt: Bytes
  workerpoolrestrict_gte: Bytes
  workerpoolrestrict_in: [Bytes!]
  workerpoolrestrict_lt: Bytes
  workerpoolrestrict_lte: Bytes
  workerpoolrestrict_not: Bytes
  workerpoolrestrict_not_contains: Bytes
  workerpoolrestrict_not_in: [Bytes!]
}

enum AppOrder_orderBy {
  app
  app__checksum
  app__id
  app__mrenclave
  app__multiaddr
  app__name
  app__timestamp
  app__type
  appprice
  datasetrestrict
  deals
  id
  requesterrestrict
  salt
  sign
  tag
  volume
  workerpoolrestrict
}

type AppTransfer implements RessourceTransferEvent {
  app: App!
  from: Account!
  id: ID!
  timestamp: BigInt!
  to: Account!
  transaction: Transaction!
}

input AppTransfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [AppTransfer_filter]
  app: String
  app_: App_filter
  app_contains: String
  app_contains_nocase: String
  app_ends_with: String
  app_ends_with_nocase: String
  app_gt: String
  app_gte: String
  app_in: [String!]
  app_lt: String
  app_lte: String
  app_not: String
  app_not_contains: String
  app_not_contains_nocase: String
  app_not_ends_with: String
  app_not_ends_with_nocase: String
  app_not_in: [String!]
  app_not_starts_with: String
  app_not_starts_with_nocase: String
  app_starts_with: String
  app_starts_with_nocase: String
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [AppTransfer_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum AppTransfer_orderBy {
  app
  app__checksum
  app__id
  app__mrenclave
  app__multiaddr
  app__name
  app__timestamp
  app__type
  from
  from__balance
  from__frozen
  from__id
  from__score
  id
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input App_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [App_filter]
  checksum: Bytes
  checksum_contains: Bytes
  checksum_gt: Bytes
  checksum_gte: Bytes
  checksum_in: [Bytes!]
  checksum_lt: Bytes
  checksum_lte: Bytes
  checksum_not: Bytes
  checksum_not_contains: Bytes
  checksum_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  mrenclave: Bytes
  mrenclave_contains: Bytes
  mrenclave_gt: Bytes
  mrenclave_gte: Bytes
  mrenclave_in: [Bytes!]
  mrenclave_lt: Bytes
  mrenclave_lte: Bytes
  mrenclave_not: Bytes
  mrenclave_not_contains: Bytes
  mrenclave_not_in: [Bytes!]
  multiaddr: Bytes
  multiaddr_contains: Bytes
  multiaddr_gt: Bytes
  multiaddr_gte: Bytes
  multiaddr_in: [Bytes!]
  multiaddr_lt: Bytes
  multiaddr_lte: Bytes
  multiaddr_not: Bytes
  multiaddr_not_contains: Bytes
  multiaddr_not_in: [Bytes!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [App_filter]
  orders_: AppOrder_filter
  owner: String
  owner_: Account_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transfers_: AppTransfer_filter
  type: String
  type_contains: String
  type_contains_nocase: String
  type_ends_with: String
  type_ends_with_nocase: String
  type_gt: String
  type_gte: String
  type_in: [String!]
  type_lt: String
  type_lte: String
  type_not: String
  type_not_contains: String
  type_not_contains_nocase: String
  type_not_ends_with: String
  type_not_ends_with_nocase: String
  type_not_in: [String!]
  type_not_starts_with: String
  type_not_starts_with_nocase: String
  type_starts_with: String
  type_starts_with_nocase: String
  usages_: Deal_filter
}

enum App_orderBy {
  checksum
  id
  mrenclave
  multiaddr
  name
  orders
  owner
  owner__balance
  owner__frozen
  owner__id
  owner__score
  timestamp
  transfers
  type
  usages
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type Category {
  deals(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  description: String!
  id: ID!
  name: String!
  timestamp: BigInt!
  workClockTimeRef: BigInt!
}

input Category_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Category_filter]
  deals_: Deal_filter
  description: String
  description_contains: String
  description_contains_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Category_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  workClockTimeRef: BigInt
  workClockTimeRef_gt: BigInt
  workClockTimeRef_gte: BigInt
  workClockTimeRef_in: [BigInt!]
  workClockTimeRef_lt: BigInt
  workClockTimeRef_lte: BigInt
  workClockTimeRef_not: BigInt
  workClockTimeRef_not_in: [BigInt!]
}

enum Category_orderBy {
  deals
  description
  id
  name
  timestamp
  workClockTimeRef
}

type Contribution {
  challenge: Bytes!
  hash: Bytes!
  id: ID!
  seal: Bytes!
  status: ContributionStatus!
  task: Task!
  timestamp: Int!
  worker: Account!
}

enum ContributionStatus {
  CONTRIBUTED
  PROVED
  REJECTED
  UNSET
}

input Contribution_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Contribution_filter]
  challenge: Bytes
  challenge_contains: Bytes
  challenge_gt: Bytes
  challenge_gte: Bytes
  challenge_in: [Bytes!]
  challenge_lt: Bytes
  challenge_lte: Bytes
  challenge_not: Bytes
  challenge_not_contains: Bytes
  challenge_not_in: [Bytes!]
  hash: Bytes
  hash_contains: Bytes
  hash_gt: Bytes
  hash_gte: Bytes
  hash_in: [Bytes!]
  hash_lt: Bytes
  hash_lte: Bytes
  hash_not: Bytes
  hash_not_contains: Bytes
  hash_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Contribution_filter]
  seal: Bytes
  seal_contains: Bytes
  seal_gt: Bytes
  seal_gte: Bytes
  seal_in: [Bytes!]
  seal_lt: Bytes
  seal_lte: Bytes
  seal_not: Bytes
  seal_not_contains: Bytes
  seal_not_in: [Bytes!]
  status: ContributionStatus
  status_in: [ContributionStatus!]
  status_not: ContributionStatus
  status_not_in: [ContributionStatus!]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: Int
  timestamp_gt: Int
  timestamp_gte: Int
  timestamp_in: [Int!]
  timestamp_lt: Int
  timestamp_lte: Int
  timestamp_not: Int
  timestamp_not_in: [Int!]
  worker: String
  worker_: Account_filter
  worker_contains: String
  worker_contains_nocase: String
  worker_ends_with: String
  worker_ends_with_nocase: String
  worker_gt: String
  worker_gte: String
  worker_in: [String!]
  worker_lt: String
  worker_lte: String
  worker_not: String
  worker_not_contains: String
  worker_not_contains_nocase: String
  worker_not_ends_with: String
  worker_not_ends_with_nocase: String
  worker_not_in: [String!]
  worker_not_starts_with: String
  worker_not_starts_with_nocase: String
  worker_starts_with: String
  worker_starts_with_nocase: String
}

enum Contribution_orderBy {
  challenge
  hash
  id
  seal
  status
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  worker
  worker__balance
  worker__frozen
  worker__id
  worker__score
}

type Dataset implements Ressource {
  checksum: Bytes!
  id: ID!
  multiaddr: Bytes!
  name: String!
  orders(first: Int = 100, orderBy: DatasetOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: DatasetOrder_filter): [DatasetOrder!]!
  owner: Account!
  timestamp: BigInt!
  transfers(first: Int = 100, orderBy: DatasetTransfer_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: DatasetTransfer_filter): [DatasetTransfer!]!
  usages(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
}

type DatasetOrder {
  apprestrict: Bytes
  dataset: Dataset!
  datasetprice: BigDecimal!
  deals(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  id: ID!
  requesterrestrict: Bytes
  salt: Bytes
  sign: Bytes
  tag: Bytes
  volume: BigInt
  workerpoolrestrict: Bytes
}

input DatasetOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DatasetOrder_filter]
  apprestrict: Bytes
  apprestrict_contains: Bytes
  apprestrict_gt: Bytes
  apprestrict_gte: Bytes
  apprestrict_in: [Bytes!]
  apprestrict_lt: Bytes
  apprestrict_lte: Bytes
  apprestrict_not: Bytes
  apprestrict_not_contains: Bytes
  apprestrict_not_in: [Bytes!]
  dataset: String
  dataset_: Dataset_filter
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_gt: String
  dataset_gte: String
  dataset_in: [String!]
  dataset_lt: String
  dataset_lte: String
  dataset_not: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_not_in: [String!]
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  datasetprice: BigDecimal
  datasetprice_gt: BigDecimal
  datasetprice_gte: BigDecimal
  datasetprice_in: [BigDecimal!]
  datasetprice_lt: BigDecimal
  datasetprice_lte: BigDecimal
  datasetprice_not: BigDecimal
  datasetprice_not_in: [BigDecimal!]
  deals_: Deal_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [DatasetOrder_filter]
  requesterrestrict: Bytes
  requesterrestrict_contains: Bytes
  requesterrestrict_gt: Bytes
  requesterrestrict_gte: Bytes
  requesterrestrict_in: [Bytes!]
  requesterrestrict_lt: Bytes
  requesterrestrict_lte: Bytes
  requesterrestrict_not: Bytes
  requesterrestrict_not_contains: Bytes
  requesterrestrict_not_in: [Bytes!]
  salt: Bytes
  salt_contains: Bytes
  salt_gt: Bytes
  salt_gte: Bytes
  salt_in: [Bytes!]
  salt_lt: Bytes
  salt_lte: Bytes
  salt_not: Bytes
  salt_not_contains: Bytes
  salt_not_in: [Bytes!]
  sign: Bytes
  sign_contains: Bytes
  sign_gt: Bytes
  sign_gte: Bytes
  sign_in: [Bytes!]
  sign_lt: Bytes
  sign_lte: Bytes
  sign_not: Bytes
  sign_not_contains: Bytes
  sign_not_in: [Bytes!]
  tag: Bytes
  tag_contains: Bytes
  tag_gt: Bytes
  tag_gte: Bytes
  tag_in: [Bytes!]
  tag_lt: Bytes
  tag_lte: Bytes
  tag_not: Bytes
  tag_not_contains: Bytes
  tag_not_in: [Bytes!]
  volume: BigInt
  volume_gt: BigInt
  volume_gte: BigInt
  volume_in: [BigInt!]
  volume_lt: BigInt
  volume_lte: BigInt
  volume_not: BigInt
  volume_not_in: [BigInt!]
  workerpoolrestrict: Bytes
  workerpoolrestrict_contains: Bytes
  workerpoolrestrict_gt: Bytes
  workerpoolrestrict_gte: Bytes
  workerpoolrestrict_in: [Bytes!]
  workerpoolrestrict_lt: Bytes
  workerpoolrestrict_lte: Bytes
  workerpoolrestrict_not: Bytes
  workerpoolrestrict_not_contains: Bytes
  workerpoolrestrict_not_in: [Bytes!]
}

enum DatasetOrder_orderBy {
  apprestrict
  dataset
  dataset__checksum
  dataset__id
  dataset__multiaddr
  dataset__name
  dataset__timestamp
  datasetprice
  deals
  id
  requesterrestrict
  salt
  sign
  tag
  volume
  workerpoolrestrict
}

type DatasetTransfer implements RessourceTransferEvent {
  dataset: Dataset!
  from: Account!
  id: ID!
  timestamp: BigInt!
  to: Account!
  transaction: Transaction!
}

input DatasetTransfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DatasetTransfer_filter]
  dataset: String
  dataset_: Dataset_filter
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_gt: String
  dataset_gte: String
  dataset_in: [String!]
  dataset_lt: String
  dataset_lte: String
  dataset_not: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_not_in: [String!]
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [DatasetTransfer_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum DatasetTransfer_orderBy {
  dataset
  dataset__checksum
  dataset__id
  dataset__multiaddr
  dataset__name
  dataset__timestamp
  from
  from__balance
  from__frozen
  from__id
  from__score
  id
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input Dataset_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Dataset_filter]
  checksum: Bytes
  checksum_contains: Bytes
  checksum_gt: Bytes
  checksum_gte: Bytes
  checksum_in: [Bytes!]
  checksum_lt: Bytes
  checksum_lte: Bytes
  checksum_not: Bytes
  checksum_not_contains: Bytes
  checksum_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  multiaddr: Bytes
  multiaddr_contains: Bytes
  multiaddr_gt: Bytes
  multiaddr_gte: Bytes
  multiaddr_in: [Bytes!]
  multiaddr_lt: Bytes
  multiaddr_lte: Bytes
  multiaddr_not: Bytes
  multiaddr_not_contains: Bytes
  multiaddr_not_in: [Bytes!]
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [Dataset_filter]
  orders_: DatasetOrder_filter
  owner: String
  owner_: Account_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transfers_: DatasetTransfer_filter
  usages_: Deal_filter
}

enum Dataset_orderBy {
  checksum
  id
  multiaddr
  name
  orders
  owner
  owner__balance
  owner__frozen
  owner__id
  owner__score
  timestamp
  transfers
  usages
}

type Deal {
  app: App!
  appOwner: Account!
  appPrice: BigDecimal!
  apporder: AppOrder
  beneficiary: Account!
  botFirst: BigInt!
  botSize: BigInt!
  callback: Account!
  category: Category!
  claimedTasksCount: BigInt!
  completedTasksCount: BigInt!
  dataset: Dataset
  datasetOwner: Account!
  datasetPrice: BigDecimal!
  datasetorder: DatasetOrder
  events(first: Int = 100, orderBy: DealEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: DealEvent_filter): [DealEvent!]!
  id: ID!
  params: String!
  requester: Account!
  requestorder: RequestOrder
  schedulerRewardRatio: BigInt!
  sponsor: Account!
  startTime: BigInt!
  tag: Bytes!
  tasks(first: Int = 100, orderBy: Task_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Task_filter): [Task!]!
  timestamp: BigInt!
  trust: BigInt!
  workerStake: BigInt!
  workerpool: Workerpool!
  workerpoolOwner: Account!
  workerpoolPrice: BigDecimal!
  workerpoolorder: WorkerpoolOrder
}

interface DealEvent {
  deal: Deal!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
}

input DealEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [DealEvent_filter]
  deal: String
  deal_: Deal_filter
  deal_contains: String
  deal_contains_nocase: String
  deal_ends_with: String
  deal_ends_with_nocase: String
  deal_gt: String
  deal_gte: String
  deal_in: [String!]
  deal_lt: String
  deal_lte: String
  deal_not: String
  deal_not_contains: String
  deal_not_contains_nocase: String
  deal_not_ends_with: String
  deal_not_ends_with_nocase: String
  deal_not_in: [String!]
  deal_not_starts_with: String
  deal_not_starts_with_nocase: String
  deal_starts_with: String
  deal_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [DealEvent_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum DealEvent_orderBy {
  deal
  deal__appPrice
  deal__botFirst
  deal__botSize
  deal__claimedTasksCount
  deal__completedTasksCount
  deal__datasetPrice
  deal__id
  deal__params
  deal__schedulerRewardRatio
  deal__startTime
  deal__tag
  deal__timestamp
  deal__trust
  deal__workerStake
  deal__workerpoolPrice
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input Deal_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Deal_filter]
  app: String
  appOwner: String
  appOwner_: Account_filter
  appOwner_contains: String
  appOwner_contains_nocase: String
  appOwner_ends_with: String
  appOwner_ends_with_nocase: String
  appOwner_gt: String
  appOwner_gte: String
  appOwner_in: [String!]
  appOwner_lt: String
  appOwner_lte: String
  appOwner_not: String
  appOwner_not_contains: String
  appOwner_not_contains_nocase: String
  appOwner_not_ends_with: String
  appOwner_not_ends_with_nocase: String
  appOwner_not_in: [String!]
  appOwner_not_starts_with: String
  appOwner_not_starts_with_nocase: String
  appOwner_starts_with: String
  appOwner_starts_with_nocase: String
  appPrice: BigDecimal
  appPrice_gt: BigDecimal
  appPrice_gte: BigDecimal
  appPrice_in: [BigDecimal!]
  appPrice_lt: BigDecimal
  appPrice_lte: BigDecimal
  appPrice_not: BigDecimal
  appPrice_not_in: [BigDecimal!]
  app_: App_filter
  app_contains: String
  app_contains_nocase: String
  app_ends_with: String
  app_ends_with_nocase: String
  app_gt: String
  app_gte: String
  app_in: [String!]
  app_lt: String
  app_lte: String
  app_not: String
  app_not_contains: String
  app_not_contains_nocase: String
  app_not_ends_with: String
  app_not_ends_with_nocase: String
  app_not_in: [String!]
  app_not_starts_with: String
  app_not_starts_with_nocase: String
  app_starts_with: String
  app_starts_with_nocase: String
  apporder: String
  apporder_: AppOrder_filter
  apporder_contains: String
  apporder_contains_nocase: String
  apporder_ends_with: String
  apporder_ends_with_nocase: String
  apporder_gt: String
  apporder_gte: String
  apporder_in: [String!]
  apporder_lt: String
  apporder_lte: String
  apporder_not: String
  apporder_not_contains: String
  apporder_not_contains_nocase: String
  apporder_not_ends_with: String
  apporder_not_ends_with_nocase: String
  apporder_not_in: [String!]
  apporder_not_starts_with: String
  apporder_not_starts_with_nocase: String
  apporder_starts_with: String
  apporder_starts_with_nocase: String
  beneficiary: String
  beneficiary_: Account_filter
  beneficiary_contains: String
  beneficiary_contains_nocase: String
  beneficiary_ends_with: String
  beneficiary_ends_with_nocase: String
  beneficiary_gt: String
  beneficiary_gte: String
  beneficiary_in: [String!]
  beneficiary_lt: String
  beneficiary_lte: String
  beneficiary_not: String
  beneficiary_not_contains: String
  beneficiary_not_contains_nocase: String
  beneficiary_not_ends_with: String
  beneficiary_not_ends_with_nocase: String
  beneficiary_not_in: [String!]
  beneficiary_not_starts_with: String
  beneficiary_not_starts_with_nocase: String
  beneficiary_starts_with: String
  beneficiary_starts_with_nocase: String
  botFirst: BigInt
  botFirst_gt: BigInt
  botFirst_gte: BigInt
  botFirst_in: [BigInt!]
  botFirst_lt: BigInt
  botFirst_lte: BigInt
  botFirst_not: BigInt
  botFirst_not_in: [BigInt!]
  botSize: BigInt
  botSize_gt: BigInt
  botSize_gte: BigInt
  botSize_in: [BigInt!]
  botSize_lt: BigInt
  botSize_lte: BigInt
  botSize_not: BigInt
  botSize_not_in: [BigInt!]
  callback: String
  callback_: Account_filter
  callback_contains: String
  callback_contains_nocase: String
  callback_ends_with: String
  callback_ends_with_nocase: String
  callback_gt: String
  callback_gte: String
  callback_in: [String!]
  callback_lt: String
  callback_lte: String
  callback_not: String
  callback_not_contains: String
  callback_not_contains_nocase: String
  callback_not_ends_with: String
  callback_not_ends_with_nocase: String
  callback_not_in: [String!]
  callback_not_starts_with: String
  callback_not_starts_with_nocase: String
  callback_starts_with: String
  callback_starts_with_nocase: String
  category: String
  category_: Category_filter
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  claimedTasksCount: BigInt
  claimedTasksCount_gt: BigInt
  claimedTasksCount_gte: BigInt
  claimedTasksCount_in: [BigInt!]
  claimedTasksCount_lt: BigInt
  claimedTasksCount_lte: BigInt
  claimedTasksCount_not: BigInt
  claimedTasksCount_not_in: [BigInt!]
  completedTasksCount: BigInt
  completedTasksCount_gt: BigInt
  completedTasksCount_gte: BigInt
  completedTasksCount_in: [BigInt!]
  completedTasksCount_lt: BigInt
  completedTasksCount_lte: BigInt
  completedTasksCount_not: BigInt
  completedTasksCount_not_in: [BigInt!]
  dataset: String
  datasetOwner: String
  datasetOwner_: Account_filter
  datasetOwner_contains: String
  datasetOwner_contains_nocase: String
  datasetOwner_ends_with: String
  datasetOwner_ends_with_nocase: String
  datasetOwner_gt: String
  datasetOwner_gte: String
  datasetOwner_in: [String!]
  datasetOwner_lt: String
  datasetOwner_lte: String
  datasetOwner_not: String
  datasetOwner_not_contains: String
  datasetOwner_not_contains_nocase: String
  datasetOwner_not_ends_with: String
  datasetOwner_not_ends_with_nocase: String
  datasetOwner_not_in: [String!]
  datasetOwner_not_starts_with: String
  datasetOwner_not_starts_with_nocase: String
  datasetOwner_starts_with: String
  datasetOwner_starts_with_nocase: String
  datasetPrice: BigDecimal
  datasetPrice_gt: BigDecimal
  datasetPrice_gte: BigDecimal
  datasetPrice_in: [BigDecimal!]
  datasetPrice_lt: BigDecimal
  datasetPrice_lte: BigDecimal
  datasetPrice_not: BigDecimal
  datasetPrice_not_in: [BigDecimal!]
  dataset_: Dataset_filter
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_gt: String
  dataset_gte: String
  dataset_in: [String!]
  dataset_lt: String
  dataset_lte: String
  dataset_not: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_not_in: [String!]
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  datasetorder: String
  datasetorder_: DatasetOrder_filter
  datasetorder_contains: String
  datasetorder_contains_nocase: String
  datasetorder_ends_with: String
  datasetorder_ends_with_nocase: String
  datasetorder_gt: String
  datasetorder_gte: String
  datasetorder_in: [String!]
  datasetorder_lt: String
  datasetorder_lte: String
  datasetorder_not: String
  datasetorder_not_contains: String
  datasetorder_not_contains_nocase: String
  datasetorder_not_ends_with: String
  datasetorder_not_ends_with_nocase: String
  datasetorder_not_in: [String!]
  datasetorder_not_starts_with: String
  datasetorder_not_starts_with_nocase: String
  datasetorder_starts_with: String
  datasetorder_starts_with_nocase: String
  events_: DealEvent_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Deal_filter]
  params: String
  params_contains: String
  params_contains_nocase: String
  params_ends_with: String
  params_ends_with_nocase: String
  params_gt: String
  params_gte: String
  params_in: [String!]
  params_lt: String
  params_lte: String
  params_not: String
  params_not_contains: String
  params_not_contains_nocase: String
  params_not_ends_with: String
  params_not_ends_with_nocase: String
  params_not_in: [String!]
  params_not_starts_with: String
  params_not_starts_with_nocase: String
  params_starts_with: String
  params_starts_with_nocase: String
  requester: String
  requester_: Account_filter
  requester_contains: String
  requester_contains_nocase: String
  requester_ends_with: String
  requester_ends_with_nocase: String
  requester_gt: String
  requester_gte: String
  requester_in: [String!]
  requester_lt: String
  requester_lte: String
  requester_not: String
  requester_not_contains: String
  requester_not_contains_nocase: String
  requester_not_ends_with: String
  requester_not_ends_with_nocase: String
  requester_not_in: [String!]
  requester_not_starts_with: String
  requester_not_starts_with_nocase: String
  requester_starts_with: String
  requester_starts_with_nocase: String
  requestorder: String
  requestorder_: RequestOrder_filter
  requestorder_contains: String
  requestorder_contains_nocase: String
  requestorder_ends_with: String
  requestorder_ends_with_nocase: String
  requestorder_gt: String
  requestorder_gte: String
  requestorder_in: [String!]
  requestorder_lt: String
  requestorder_lte: String
  requestorder_not: String
  requestorder_not_contains: String
  requestorder_not_contains_nocase: String
  requestorder_not_ends_with: String
  requestorder_not_ends_with_nocase: String
  requestorder_not_in: [String!]
  requestorder_not_starts_with: String
  requestorder_not_starts_with_nocase: String
  requestorder_starts_with: String
  requestorder_starts_with_nocase: String
  schedulerRewardRatio: BigInt
  schedulerRewardRatio_gt: BigInt
  schedulerRewardRatio_gte: BigInt
  schedulerRewardRatio_in: [BigInt!]
  schedulerRewardRatio_lt: BigInt
  schedulerRewardRatio_lte: BigInt
  schedulerRewardRatio_not: BigInt
  schedulerRewardRatio_not_in: [BigInt!]
  sponsor: String
  sponsor_: Account_filter
  sponsor_contains: String
  sponsor_contains_nocase: String
  sponsor_ends_with: String
  sponsor_ends_with_nocase: String
  sponsor_gt: String
  sponsor_gte: String
  sponsor_in: [String!]
  sponsor_lt: String
  sponsor_lte: String
  sponsor_not: String
  sponsor_not_contains: String
  sponsor_not_contains_nocase: String
  sponsor_not_ends_with: String
  sponsor_not_ends_with_nocase: String
  sponsor_not_in: [String!]
  sponsor_not_starts_with: String
  sponsor_not_starts_with_nocase: String
  sponsor_starts_with: String
  sponsor_starts_with_nocase: String
  startTime: BigInt
  startTime_gt: BigInt
  startTime_gte: BigInt
  startTime_in: [BigInt!]
  startTime_lt: BigInt
  startTime_lte: BigInt
  startTime_not: BigInt
  startTime_not_in: [BigInt!]
  tag: Bytes
  tag_contains: Bytes
  tag_gt: Bytes
  tag_gte: Bytes
  tag_in: [Bytes!]
  tag_lt: Bytes
  tag_lte: Bytes
  tag_not: Bytes
  tag_not_contains: Bytes
  tag_not_in: [Bytes!]
  tasks_: Task_filter
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  trust: BigInt
  trust_gt: BigInt
  trust_gte: BigInt
  trust_in: [BigInt!]
  trust_lt: BigInt
  trust_lte: BigInt
  trust_not: BigInt
  trust_not_in: [BigInt!]
  workerStake: BigInt
  workerStake_gt: BigInt
  workerStake_gte: BigInt
  workerStake_in: [BigInt!]
  workerStake_lt: BigInt
  workerStake_lte: BigInt
  workerStake_not: BigInt
  workerStake_not_in: [BigInt!]
  workerpool: String
  workerpoolOwner: String
  workerpoolOwner_: Account_filter
  workerpoolOwner_contains: String
  workerpoolOwner_contains_nocase: String
  workerpoolOwner_ends_with: String
  workerpoolOwner_ends_with_nocase: String
  workerpoolOwner_gt: String
  workerpoolOwner_gte: String
  workerpoolOwner_in: [String!]
  workerpoolOwner_lt: String
  workerpoolOwner_lte: String
  workerpoolOwner_not: String
  workerpoolOwner_not_contains: String
  workerpoolOwner_not_contains_nocase: String
  workerpoolOwner_not_ends_with: String
  workerpoolOwner_not_ends_with_nocase: String
  workerpoolOwner_not_in: [String!]
  workerpoolOwner_not_starts_with: String
  workerpoolOwner_not_starts_with_nocase: String
  workerpoolOwner_starts_with: String
  workerpoolOwner_starts_with_nocase: String
  workerpoolPrice: BigDecimal
  workerpoolPrice_gt: BigDecimal
  workerpoolPrice_gte: BigDecimal
  workerpoolPrice_in: [BigDecimal!]
  workerpoolPrice_lt: BigDecimal
  workerpoolPrice_lte: BigDecimal
  workerpoolPrice_not: BigDecimal
  workerpoolPrice_not_in: [BigDecimal!]
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
  workerpoolorder: String
  workerpoolorder_: WorkerpoolOrder_filter
  workerpoolorder_contains: String
  workerpoolorder_contains_nocase: String
  workerpoolorder_ends_with: String
  workerpoolorder_ends_with_nocase: String
  workerpoolorder_gt: String
  workerpoolorder_gte: String
  workerpoolorder_in: [String!]
  workerpoolorder_lt: String
  workerpoolorder_lte: String
  workerpoolorder_not: String
  workerpoolorder_not_contains: String
  workerpoolorder_not_contains_nocase: String
  workerpoolorder_not_ends_with: String
  workerpoolorder_not_ends_with_nocase: String
  workerpoolorder_not_in: [String!]
  workerpoolorder_not_starts_with: String
  workerpoolorder_not_starts_with_nocase: String
  workerpoolorder_starts_with: String
  workerpoolorder_starts_with_nocase: String
}

enum Deal_orderBy {
  app
  appOwner
  appOwner__balance
  appOwner__frozen
  appOwner__id
  appOwner__score
  appPrice
  app__checksum
  app__id
  app__mrenclave
  app__multiaddr
  app__name
  app__timestamp
  app__type
  apporder
  apporder__appprice
  apporder__datasetrestrict
  apporder__id
  apporder__requesterrestrict
  apporder__salt
  apporder__sign
  apporder__tag
  apporder__volume
  apporder__workerpoolrestrict
  beneficiary
  beneficiary__balance
  beneficiary__frozen
  beneficiary__id
  beneficiary__score
  botFirst
  botSize
  callback
  callback__balance
  callback__frozen
  callback__id
  callback__score
  category
  category__description
  category__id
  category__name
  category__timestamp
  category__workClockTimeRef
  claimedTasksCount
  completedTasksCount
  dataset
  datasetOwner
  datasetOwner__balance
  datasetOwner__frozen
  datasetOwner__id
  datasetOwner__score
  datasetPrice
  dataset__checksum
  dataset__id
  dataset__multiaddr
  dataset__name
  dataset__timestamp
  datasetorder
  datasetorder__apprestrict
  datasetorder__datasetprice
  datasetorder__id
  datasetorder__requesterrestrict
  datasetorder__salt
  datasetorder__sign
  datasetorder__tag
  datasetorder__volume
  datasetorder__workerpoolrestrict
  events
  id
  params
  requester
  requester__balance
  requester__frozen
  requester__id
  requester__score
  requestorder
  requestorder__appmaxprice
  requestorder__datasetmaxprice
  requestorder__id
  requestorder__params
  requestorder__salt
  requestorder__sign
  requestorder__tag
  requestorder__trust
  requestorder__volume
  requestorder__workerpoolmaxprice
  schedulerRewardRatio
  sponsor
  sponsor__balance
  sponsor__frozen
  sponsor__id
  sponsor__score
  startTime
  tag
  tasks
  timestamp
  trust
  workerStake
  workerpool
  workerpoolOwner
  workerpoolOwner__balance
  workerpoolOwner__frozen
  workerpoolOwner__id
  workerpoolOwner__score
  workerpoolPrice
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
  workerpoolorder
  workerpoolorder__apprestrict
  workerpoolorder__datasetrestrict
  workerpoolorder__id
  workerpoolorder__requesterrestrict
  workerpoolorder__salt
  workerpoolorder__sign
  workerpoolorder__tag
  workerpoolorder__trust
  workerpoolorder__volume
  workerpoolorder__workerpoolprice
}

type ERC1538CommitMessage implements ERC1538Event {
  id: ID!
  message: String!
  timestamp: BigInt!
  transaction: Transaction!
}

input ERC1538CommitMessage_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1538CommitMessage_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  message: String
  message_contains: String
  message_contains_nocase: String
  message_ends_with: String
  message_ends_with_nocase: String
  message_gt: String
  message_gte: String
  message_in: [String!]
  message_lt: String
  message_lte: String
  message_not: String
  message_not_contains: String
  message_not_contains_nocase: String
  message_not_ends_with: String
  message_not_ends_with_nocase: String
  message_not_in: [String!]
  message_not_starts_with: String
  message_not_starts_with_nocase: String
  message_starts_with: String
  message_starts_with_nocase: String
  or: [ERC1538CommitMessage_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum ERC1538CommitMessage_orderBy {
  id
  message
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

interface ERC1538Event {
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
}

input ERC1538Event_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1538Event_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [ERC1538Event_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum ERC1538Event_orderBy {
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type ERC1538Function {
  id: ID!
  module: ERC1538Module!
  name: String!
  updates(first: Int = 100, orderBy: ERC1538FunctionUpdate_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ERC1538FunctionUpdate_filter): [ERC1538FunctionUpdate!]!
}

type ERC1538FunctionUpdate implements ERC1538Event {
  functionId: ERC1538Function!
  id: ID!
  newmodule: ERC1538Module!
  oldmodule: ERC1538Module!
  timestamp: BigInt!
  transaction: Transaction!
}

input ERC1538FunctionUpdate_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1538FunctionUpdate_filter]
  functionId: String
  functionId_: ERC1538Function_filter
  functionId_contains: String
  functionId_contains_nocase: String
  functionId_ends_with: String
  functionId_ends_with_nocase: String
  functionId_gt: String
  functionId_gte: String
  functionId_in: [String!]
  functionId_lt: String
  functionId_lte: String
  functionId_not: String
  functionId_not_contains: String
  functionId_not_contains_nocase: String
  functionId_not_ends_with: String
  functionId_not_ends_with_nocase: String
  functionId_not_in: [String!]
  functionId_not_starts_with: String
  functionId_not_starts_with_nocase: String
  functionId_starts_with: String
  functionId_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  newmodule: String
  newmodule_: ERC1538Module_filter
  newmodule_contains: String
  newmodule_contains_nocase: String
  newmodule_ends_with: String
  newmodule_ends_with_nocase: String
  newmodule_gt: String
  newmodule_gte: String
  newmodule_in: [String!]
  newmodule_lt: String
  newmodule_lte: String
  newmodule_not: String
  newmodule_not_contains: String
  newmodule_not_contains_nocase: String
  newmodule_not_ends_with: String
  newmodule_not_ends_with_nocase: String
  newmodule_not_in: [String!]
  newmodule_not_starts_with: String
  newmodule_not_starts_with_nocase: String
  newmodule_starts_with: String
  newmodule_starts_with_nocase: String
  oldmodule: String
  oldmodule_: ERC1538Module_filter
  oldmodule_contains: String
  oldmodule_contains_nocase: String
  oldmodule_ends_with: String
  oldmodule_ends_with_nocase: String
  oldmodule_gt: String
  oldmodule_gte: String
  oldmodule_in: [String!]
  oldmodule_lt: String
  oldmodule_lte: String
  oldmodule_not: String
  oldmodule_not_contains: String
  oldmodule_not_contains_nocase: String
  oldmodule_not_ends_with: String
  oldmodule_not_ends_with_nocase: String
  oldmodule_not_in: [String!]
  oldmodule_not_starts_with: String
  oldmodule_not_starts_with_nocase: String
  oldmodule_starts_with: String
  oldmodule_starts_with_nocase: String
  or: [ERC1538FunctionUpdate_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum ERC1538FunctionUpdate_orderBy {
  functionId
  functionId__id
  functionId__name
  id
  newmodule
  newmodule__id
  oldmodule
  oldmodule__id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input ERC1538Function_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1538Function_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  module: String
  module_: ERC1538Module_filter
  module_contains: String
  module_contains_nocase: String
  module_ends_with: String
  module_ends_with_nocase: String
  module_gt: String
  module_gte: String
  module_in: [String!]
  module_lt: String
  module_lte: String
  module_not: String
  module_not_contains: String
  module_not_contains_nocase: String
  module_not_ends_with: String
  module_not_ends_with_nocase: String
  module_not_in: [String!]
  module_not_starts_with: String
  module_not_starts_with_nocase: String
  module_starts_with: String
  module_starts_with_nocase: String
  name: String
  name_contains: String
  name_contains_nocase: String
  name_ends_with: String
  name_ends_with_nocase: String
  name_gt: String
  name_gte: String
  name_in: [String!]
  name_lt: String
  name_lte: String
  name_not: String
  name_not_contains: String
  name_not_contains_nocase: String
  name_not_ends_with: String
  name_not_ends_with_nocase: String
  name_not_in: [String!]
  name_not_starts_with: String
  name_not_starts_with_nocase: String
  name_starts_with: String
  name_starts_with_nocase: String
  or: [ERC1538Function_filter]
  updates_: ERC1538FunctionUpdate_filter
}

enum ERC1538Function_orderBy {
  id
  module
  module__id
  name
  updates
}

type ERC1538Module {
  functions(first: Int = 100, orderBy: ERC1538Function_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ERC1538Function_filter): [ERC1538Function!]!
  id: ID!
}

input ERC1538Module_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [ERC1538Module_filter]
  functions_: ERC1538Function_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [ERC1538Module_filter]
}

enum ERC1538Module_orderBy {
  functions
  id
}

type FaultyContribution implements AccountEvent {
  account: Account!
  contribution: Contribution!
  id: ID!
  score: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
}

input FaultyContribution_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [FaultyContribution_filter]
  contribution: String
  contribution_: Contribution_filter
  contribution_contains: String
  contribution_contains_nocase: String
  contribution_ends_with: String
  contribution_ends_with_nocase: String
  contribution_gt: String
  contribution_gte: String
  contribution_in: [String!]
  contribution_lt: String
  contribution_lte: String
  contribution_not: String
  contribution_not_contains: String
  contribution_not_contains_nocase: String
  contribution_not_ends_with: String
  contribution_not_ends_with_nocase: String
  contribution_not_in: [String!]
  contribution_not_starts_with: String
  contribution_not_starts_with_nocase: String
  contribution_starts_with: String
  contribution_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [FaultyContribution_filter]
  score: BigInt
  score_gt: BigInt
  score_gte: BigInt
  score_in: [BigInt!]
  score_lt: BigInt
  score_lte: BigInt
  score_not: BigInt
  score_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum FaultyContribution_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  contribution
  contribution__challenge
  contribution__hash
  contribution__id
  contribution__seal
  contribution__status
  contribution__timestamp
  id
  score
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

"""
8 bytes signed integer

"""
scalar Int8

type Lock implements AccountEvent {
  account: Account!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  value: BigDecimal!
}

input Lock_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [Lock_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Lock_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  value: BigDecimal
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum Lock_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  value
}

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type OrdersMatched implements DealEvent {
  deal: Deal!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
}

input OrdersMatched_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [OrdersMatched_filter]
  deal: String
  deal_: Deal_filter
  deal_contains: String
  deal_contains_nocase: String
  deal_ends_with: String
  deal_ends_with_nocase: String
  deal_gt: String
  deal_gte: String
  deal_in: [String!]
  deal_lt: String
  deal_lte: String
  deal_not: String
  deal_not_contains: String
  deal_not_contains_nocase: String
  deal_not_ends_with: String
  deal_not_ends_with_nocase: String
  deal_not_in: [String!]
  deal_not_starts_with: String
  deal_not_starts_with_nocase: String
  deal_starts_with: String
  deal_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [OrdersMatched_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum OrdersMatched_orderBy {
  deal
  deal__appPrice
  deal__botFirst
  deal__botSize
  deal__claimedTasksCount
  deal__completedTasksCount
  deal__datasetPrice
  deal__id
  deal__params
  deal__schedulerRewardRatio
  deal__startTime
  deal__tag
  deal__timestamp
  deal__trust
  deal__workerStake
  deal__workerpoolPrice
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type PolicyUpdate implements WorkerpoolEvent {
  id: ID!
  newSchedulerRewardRatio: BigInt!
  newWorkerStakeRatio: BigInt!
  oldSchedulerRewardRatio: BigInt!
  oldWorkerStakeRatio: BigInt!
  timestamp: BigInt!
  transaction: Transaction!
  workerpool: Workerpool!
}

input PolicyUpdate_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [PolicyUpdate_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  newSchedulerRewardRatio: BigInt
  newSchedulerRewardRatio_gt: BigInt
  newSchedulerRewardRatio_gte: BigInt
  newSchedulerRewardRatio_in: [BigInt!]
  newSchedulerRewardRatio_lt: BigInt
  newSchedulerRewardRatio_lte: BigInt
  newSchedulerRewardRatio_not: BigInt
  newSchedulerRewardRatio_not_in: [BigInt!]
  newWorkerStakeRatio: BigInt
  newWorkerStakeRatio_gt: BigInt
  newWorkerStakeRatio_gte: BigInt
  newWorkerStakeRatio_in: [BigInt!]
  newWorkerStakeRatio_lt: BigInt
  newWorkerStakeRatio_lte: BigInt
  newWorkerStakeRatio_not: BigInt
  newWorkerStakeRatio_not_in: [BigInt!]
  oldSchedulerRewardRatio: BigInt
  oldSchedulerRewardRatio_gt: BigInt
  oldSchedulerRewardRatio_gte: BigInt
  oldSchedulerRewardRatio_in: [BigInt!]
  oldSchedulerRewardRatio_lt: BigInt
  oldSchedulerRewardRatio_lte: BigInt
  oldSchedulerRewardRatio_not: BigInt
  oldSchedulerRewardRatio_not_in: [BigInt!]
  oldWorkerStakeRatio: BigInt
  oldWorkerStakeRatio_gt: BigInt
  oldWorkerStakeRatio_gte: BigInt
  oldWorkerStakeRatio_in: [BigInt!]
  oldWorkerStakeRatio_lt: BigInt
  oldWorkerStakeRatio_lte: BigInt
  oldWorkerStakeRatio_not: BigInt
  oldWorkerStakeRatio_not_in: [BigInt!]
  or: [PolicyUpdate_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
}

enum PolicyUpdate_orderBy {
  id
  newSchedulerRewardRatio
  newWorkerStakeRatio
  oldSchedulerRewardRatio
  oldWorkerStakeRatio
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
}

type Protocol {
  appsCount: BigInt!
  categoriesCount: BigInt!
  claimedTasksCount: BigInt!
  completedTasksCount: BigInt!
  datasetsCount: BigInt!
  dealsCount: BigInt!
  id: ID!
  tasksCount: BigInt!
  tvl: BigDecimal!
  workerpoolsCount: BigInt!
}

input Protocol_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Protocol_filter]
  appsCount: BigInt
  appsCount_gt: BigInt
  appsCount_gte: BigInt
  appsCount_in: [BigInt!]
  appsCount_lt: BigInt
  appsCount_lte: BigInt
  appsCount_not: BigInt
  appsCount_not_in: [BigInt!]
  categoriesCount: BigInt
  categoriesCount_gt: BigInt
  categoriesCount_gte: BigInt
  categoriesCount_in: [BigInt!]
  categoriesCount_lt: BigInt
  categoriesCount_lte: BigInt
  categoriesCount_not: BigInt
  categoriesCount_not_in: [BigInt!]
  claimedTasksCount: BigInt
  claimedTasksCount_gt: BigInt
  claimedTasksCount_gte: BigInt
  claimedTasksCount_in: [BigInt!]
  claimedTasksCount_lt: BigInt
  claimedTasksCount_lte: BigInt
  claimedTasksCount_not: BigInt
  claimedTasksCount_not_in: [BigInt!]
  completedTasksCount: BigInt
  completedTasksCount_gt: BigInt
  completedTasksCount_gte: BigInt
  completedTasksCount_in: [BigInt!]
  completedTasksCount_lt: BigInt
  completedTasksCount_lte: BigInt
  completedTasksCount_not: BigInt
  completedTasksCount_not_in: [BigInt!]
  datasetsCount: BigInt
  datasetsCount_gt: BigInt
  datasetsCount_gte: BigInt
  datasetsCount_in: [BigInt!]
  datasetsCount_lt: BigInt
  datasetsCount_lte: BigInt
  datasetsCount_not: BigInt
  datasetsCount_not_in: [BigInt!]
  dealsCount: BigInt
  dealsCount_gt: BigInt
  dealsCount_gte: BigInt
  dealsCount_in: [BigInt!]
  dealsCount_lt: BigInt
  dealsCount_lte: BigInt
  dealsCount_not: BigInt
  dealsCount_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Protocol_filter]
  tasksCount: BigInt
  tasksCount_gt: BigInt
  tasksCount_gte: BigInt
  tasksCount_in: [BigInt!]
  tasksCount_lt: BigInt
  tasksCount_lte: BigInt
  tasksCount_not: BigInt
  tasksCount_not_in: [BigInt!]
  tvl: BigDecimal
  tvl_gt: BigDecimal
  tvl_gte: BigDecimal
  tvl_in: [BigDecimal!]
  tvl_lt: BigDecimal
  tvl_lte: BigDecimal
  tvl_not: BigDecimal
  tvl_not_in: [BigDecimal!]
  workerpoolsCount: BigInt
  workerpoolsCount_gt: BigInt
  workerpoolsCount_gte: BigInt
  workerpoolsCount_in: [BigInt!]
  workerpoolsCount_lt: BigInt
  workerpoolsCount_lte: BigInt
  workerpoolsCount_not: BigInt
  workerpoolsCount_not_in: [BigInt!]
}

enum Protocol_orderBy {
  appsCount
  categoriesCount
  claimedTasksCount
  completedTasksCount
  datasetsCount
  dealsCount
  id
  tasksCount
  tvl
  workerpoolsCount
}

type Query {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accountEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountEvent
  accountEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccountEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccountEvent_filter
  ): [AccountEvent!]!
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  accurateContribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccurateContribution
  accurateContributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccurateContribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccurateContribution_filter
  ): [AccurateContribution!]!
  app(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): App
  appOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AppOrder
  appOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AppOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AppOrder_filter
  ): [AppOrder!]!
  appTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AppTransfer
  appTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AppTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AppTransfer_filter
  ): [AppTransfer!]!
  apps(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: App_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: App_filter
  ): [App!]!
  categories(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Category_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Category_filter
  ): [Category!]!
  category(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Category
  contribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contribution
  contributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Contribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Contribution_filter
  ): [Contribution!]!
  dataset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Dataset
  datasetOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DatasetOrder
  datasetOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DatasetOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DatasetOrder_filter
  ): [DatasetOrder!]!
  datasetTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DatasetTransfer
  datasetTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DatasetTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DatasetTransfer_filter
  ): [DatasetTransfer!]!
  datasets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Dataset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Dataset_filter
  ): [Dataset!]!
  deal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deal
  dealEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DealEvent
  dealEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DealEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DealEvent_filter
  ): [DealEvent!]!
  deals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Deal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Deal_filter
  ): [Deal!]!
  erc1538CommitMessage(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538CommitMessage
  erc1538CommitMessages(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538CommitMessage_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538CommitMessage_filter
  ): [ERC1538CommitMessage!]!
  erc1538Event(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Event
  erc1538Events(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Event_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Event_filter
  ): [ERC1538Event!]!
  erc1538Function(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Function
  erc1538FunctionUpdate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538FunctionUpdate
  erc1538FunctionUpdates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538FunctionUpdate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538FunctionUpdate_filter
  ): [ERC1538FunctionUpdate!]!
  erc1538Functions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Function_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Function_filter
  ): [ERC1538Function!]!
  erc1538Module(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Module
  erc1538Modules(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Module_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Module_filter
  ): [ERC1538Module!]!
  faultyContribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FaultyContribution
  faultyContributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FaultyContribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FaultyContribution_filter
  ): [FaultyContribution!]!
  lock(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lock
  locks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Lock_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Lock_filter
  ): [Lock!]!
  ordersMatched(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrdersMatched
  ordersMatcheds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: OrdersMatched_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: OrdersMatched_filter
  ): [OrdersMatched!]!
  policyUpdate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PolicyUpdate
  policyUpdates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PolicyUpdate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PolicyUpdate_filter
  ): [PolicyUpdate!]!
  protocol(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Protocol_filter
  ): [Protocol!]!
  requestOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestOrder
  requestOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RequestOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RequestOrder_filter
  ): [RequestOrder!]!
  ressource(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ressource
  ressourceTransferEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RessourceTransferEvent
  ressourceTransferEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RessourceTransferEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RessourceTransferEvent_filter
  ): [RessourceTransferEvent!]!
  ressources(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Ressource_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Ressource_filter
  ): [Ressource!]!
  reward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Reward_filter
  ): [Reward!]!
  schedulerNotice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SchedulerNotice
  schedulerNotices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SchedulerNotice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SchedulerNotice_filter
  ): [SchedulerNotice!]!
  seize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Seize
  seizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Seize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Seize_filter
  ): [Seize!]!
  task(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  taskClaimed(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskClaimed
  taskClaimeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskClaimed_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskClaimed_filter
  ): [TaskClaimed!]!
  taskConsensus(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskConsensus
  taskConsensuses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskConsensus_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskConsensus_filter
  ): [TaskConsensus!]!
  taskContribute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskContribute
  taskContributes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskContribute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskContribute_filter
  ): [TaskContribute!]!
  taskEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskEvent
  taskEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskEvent_filter
  ): [TaskEvent!]!
  taskFinalize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskFinalize
  taskFinalizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskFinalize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskFinalize_filter
  ): [TaskFinalize!]!
  taskInitialize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskInitialize
  taskInitializes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskInitialize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskInitialize_filter
  ): [TaskInitialize!]!
  taskReopen(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReopen
  taskReopens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskReopen_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskReopen_filter
  ): [TaskReopen!]!
  taskReveal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReveal
  taskReveals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskReveal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskReveal_filter
  ): [TaskReveal!]!
  tasks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Task_filter
  ): [Task!]!
  transaction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transaction_filter
  ): [Transaction!]!
  transfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transfer_filter
  ): [Transfer!]!
  unlock(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unlock
  unlocks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Unlock_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Unlock_filter
  ): [Unlock!]!
  workerpool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Workerpool
  workerpoolEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolEvent
  workerpoolEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolEvent_filter
  ): [WorkerpoolEvent!]!
  workerpoolOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolOrder
  workerpoolOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolOrder_filter
  ): [WorkerpoolOrder!]!
  workerpoolTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolTransfer
  workerpoolTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolTransfer_filter
  ): [WorkerpoolTransfer!]!
  workerpools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Workerpool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Workerpool_filter
  ): [Workerpool!]!
}

type RequestOrder {
  app: App
  appmaxprice: BigDecimal
  beneficiary: Account
  callback: Account
  category: Category
  dataset: Dataset
  datasetmaxprice: BigDecimal
  deals(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  id: ID!
  params: String
  requester: Account!
  salt: Bytes
  sign: Bytes
  tag: Bytes
  trust: BigInt
  volume: BigInt
  workerpool: Workerpool
  workerpoolmaxprice: BigDecimal
}

input RequestOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RequestOrder_filter]
  app: String
  app_: App_filter
  app_contains: String
  app_contains_nocase: String
  app_ends_with: String
  app_ends_with_nocase: String
  app_gt: String
  app_gte: String
  app_in: [String!]
  app_lt: String
  app_lte: String
  app_not: String
  app_not_contains: String
  app_not_contains_nocase: String
  app_not_ends_with: String
  app_not_ends_with_nocase: String
  app_not_in: [String!]
  app_not_starts_with: String
  app_not_starts_with_nocase: String
  app_starts_with: String
  app_starts_with_nocase: String
  appmaxprice: BigDecimal
  appmaxprice_gt: BigDecimal
  appmaxprice_gte: BigDecimal
  appmaxprice_in: [BigDecimal!]
  appmaxprice_lt: BigDecimal
  appmaxprice_lte: BigDecimal
  appmaxprice_not: BigDecimal
  appmaxprice_not_in: [BigDecimal!]
  beneficiary: String
  beneficiary_: Account_filter
  beneficiary_contains: String
  beneficiary_contains_nocase: String
  beneficiary_ends_with: String
  beneficiary_ends_with_nocase: String
  beneficiary_gt: String
  beneficiary_gte: String
  beneficiary_in: [String!]
  beneficiary_lt: String
  beneficiary_lte: String
  beneficiary_not: String
  beneficiary_not_contains: String
  beneficiary_not_contains_nocase: String
  beneficiary_not_ends_with: String
  beneficiary_not_ends_with_nocase: String
  beneficiary_not_in: [String!]
  beneficiary_not_starts_with: String
  beneficiary_not_starts_with_nocase: String
  beneficiary_starts_with: String
  beneficiary_starts_with_nocase: String
  callback: String
  callback_: Account_filter
  callback_contains: String
  callback_contains_nocase: String
  callback_ends_with: String
  callback_ends_with_nocase: String
  callback_gt: String
  callback_gte: String
  callback_in: [String!]
  callback_lt: String
  callback_lte: String
  callback_not: String
  callback_not_contains: String
  callback_not_contains_nocase: String
  callback_not_ends_with: String
  callback_not_ends_with_nocase: String
  callback_not_in: [String!]
  callback_not_starts_with: String
  callback_not_starts_with_nocase: String
  callback_starts_with: String
  callback_starts_with_nocase: String
  category: String
  category_: Category_filter
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  dataset: String
  dataset_: Dataset_filter
  dataset_contains: String
  dataset_contains_nocase: String
  dataset_ends_with: String
  dataset_ends_with_nocase: String
  dataset_gt: String
  dataset_gte: String
  dataset_in: [String!]
  dataset_lt: String
  dataset_lte: String
  dataset_not: String
  dataset_not_contains: String
  dataset_not_contains_nocase: String
  dataset_not_ends_with: String
  dataset_not_ends_with_nocase: String
  dataset_not_in: [String!]
  dataset_not_starts_with: String
  dataset_not_starts_with_nocase: String
  dataset_starts_with: String
  dataset_starts_with_nocase: String
  datasetmaxprice: BigDecimal
  datasetmaxprice_gt: BigDecimal
  datasetmaxprice_gte: BigDecimal
  datasetmaxprice_in: [BigDecimal!]
  datasetmaxprice_lt: BigDecimal
  datasetmaxprice_lte: BigDecimal
  datasetmaxprice_not: BigDecimal
  datasetmaxprice_not_in: [BigDecimal!]
  deals_: Deal_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [RequestOrder_filter]
  params: String
  params_contains: String
  params_contains_nocase: String
  params_ends_with: String
  params_ends_with_nocase: String
  params_gt: String
  params_gte: String
  params_in: [String!]
  params_lt: String
  params_lte: String
  params_not: String
  params_not_contains: String
  params_not_contains_nocase: String
  params_not_ends_with: String
  params_not_ends_with_nocase: String
  params_not_in: [String!]
  params_not_starts_with: String
  params_not_starts_with_nocase: String
  params_starts_with: String
  params_starts_with_nocase: String
  requester: String
  requester_: Account_filter
  requester_contains: String
  requester_contains_nocase: String
  requester_ends_with: String
  requester_ends_with_nocase: String
  requester_gt: String
  requester_gte: String
  requester_in: [String!]
  requester_lt: String
  requester_lte: String
  requester_not: String
  requester_not_contains: String
  requester_not_contains_nocase: String
  requester_not_ends_with: String
  requester_not_ends_with_nocase: String
  requester_not_in: [String!]
  requester_not_starts_with: String
  requester_not_starts_with_nocase: String
  requester_starts_with: String
  requester_starts_with_nocase: String
  salt: Bytes
  salt_contains: Bytes
  salt_gt: Bytes
  salt_gte: Bytes
  salt_in: [Bytes!]
  salt_lt: Bytes
  salt_lte: Bytes
  salt_not: Bytes
  salt_not_contains: Bytes
  salt_not_in: [Bytes!]
  sign: Bytes
  sign_contains: Bytes
  sign_gt: Bytes
  sign_gte: Bytes
  sign_in: [Bytes!]
  sign_lt: Bytes
  sign_lte: Bytes
  sign_not: Bytes
  sign_not_contains: Bytes
  sign_not_in: [Bytes!]
  tag: Bytes
  tag_contains: Bytes
  tag_gt: Bytes
  tag_gte: Bytes
  tag_in: [Bytes!]
  tag_lt: Bytes
  tag_lte: Bytes
  tag_not: Bytes
  tag_not_contains: Bytes
  tag_not_in: [Bytes!]
  trust: BigInt
  trust_gt: BigInt
  trust_gte: BigInt
  trust_in: [BigInt!]
  trust_lt: BigInt
  trust_lte: BigInt
  trust_not: BigInt
  trust_not_in: [BigInt!]
  volume: BigInt
  volume_gt: BigInt
  volume_gte: BigInt
  volume_in: [BigInt!]
  volume_lt: BigInt
  volume_lte: BigInt
  volume_not: BigInt
  volume_not_in: [BigInt!]
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
  workerpoolmaxprice: BigDecimal
  workerpoolmaxprice_gt: BigDecimal
  workerpoolmaxprice_gte: BigDecimal
  workerpoolmaxprice_in: [BigDecimal!]
  workerpoolmaxprice_lt: BigDecimal
  workerpoolmaxprice_lte: BigDecimal
  workerpoolmaxprice_not: BigDecimal
  workerpoolmaxprice_not_in: [BigDecimal!]
}

enum RequestOrder_orderBy {
  app
  app__checksum
  app__id
  app__mrenclave
  app__multiaddr
  app__name
  app__timestamp
  app__type
  appmaxprice
  beneficiary
  beneficiary__balance
  beneficiary__frozen
  beneficiary__id
  beneficiary__score
  callback
  callback__balance
  callback__frozen
  callback__id
  callback__score
  category
  category__description
  category__id
  category__name
  category__timestamp
  category__workClockTimeRef
  dataset
  dataset__checksum
  dataset__id
  dataset__multiaddr
  dataset__name
  dataset__timestamp
  datasetmaxprice
  deals
  id
  params
  requester
  requester__balance
  requester__frozen
  requester__id
  requester__score
  salt
  sign
  tag
  trust
  volume
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
  workerpoolmaxprice
}

interface Ressource {
  id: ID!
  owner: Account!
}

interface RessourceTransferEvent {
  from: Account!
  id: ID!
  timestamp: BigInt!
  to: Account!
  transaction: Transaction!
}

input RessourceTransferEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [RessourceTransferEvent_filter]
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [RessourceTransferEvent_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum RessourceTransferEvent_orderBy {
  from
  from__balance
  from__frozen
  from__id
  from__score
  id
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

input Ressource_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Ressource_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Ressource_filter]
  owner: String
  owner_: Account_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
}

enum Ressource_orderBy {
  id
  owner
  owner__balance
  owner__frozen
  owner__id
  owner__score
}

type Reward implements AccountEvent {
  account: Account!
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
  value: BigDecimal!
}

input Reward_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [Reward_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Reward_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  value: BigDecimal
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum Reward_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  value
}

type SchedulerNotice implements WorkerpoolEvent {
  deal: Deal!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  workerpool: Workerpool!
}

input SchedulerNotice_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [SchedulerNotice_filter]
  deal: String
  deal_: Deal_filter
  deal_contains: String
  deal_contains_nocase: String
  deal_ends_with: String
  deal_ends_with_nocase: String
  deal_gt: String
  deal_gte: String
  deal_in: [String!]
  deal_lt: String
  deal_lte: String
  deal_not: String
  deal_not_contains: String
  deal_not_contains_nocase: String
  deal_not_ends_with: String
  deal_not_ends_with_nocase: String
  deal_not_in: [String!]
  deal_not_starts_with: String
  deal_not_starts_with_nocase: String
  deal_starts_with: String
  deal_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [SchedulerNotice_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
}

enum SchedulerNotice_orderBy {
  deal
  deal__appPrice
  deal__botFirst
  deal__botSize
  deal__claimedTasksCount
  deal__completedTasksCount
  deal__datasetPrice
  deal__id
  deal__params
  deal__schedulerRewardRatio
  deal__startTime
  deal__tag
  deal__timestamp
  deal__trust
  deal__workerStake
  deal__workerpoolPrice
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
}

type Seize implements AccountEvent {
  account: Account!
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
  value: BigDecimal!
}

input Seize_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [Seize_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Seize_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  value: BigDecimal
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum Seize_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  value
}

type Subscription {
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
  account(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Account
  accountEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccountEvent
  accountEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccountEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccountEvent_filter
  ): [AccountEvent!]!
  accounts(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Account_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Account_filter
  ): [Account!]!
  accurateContribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AccurateContribution
  accurateContributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AccurateContribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AccurateContribution_filter
  ): [AccurateContribution!]!
  app(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): App
  appOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AppOrder
  appOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AppOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AppOrder_filter
  ): [AppOrder!]!
  appTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): AppTransfer
  appTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: AppTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: AppTransfer_filter
  ): [AppTransfer!]!
  apps(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: App_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: App_filter
  ): [App!]!
  categories(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Category_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Category_filter
  ): [Category!]!
  category(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Category
  contribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Contribution
  contributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Contribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Contribution_filter
  ): [Contribution!]!
  dataset(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Dataset
  datasetOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DatasetOrder
  datasetOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DatasetOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DatasetOrder_filter
  ): [DatasetOrder!]!
  datasetTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DatasetTransfer
  datasetTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DatasetTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DatasetTransfer_filter
  ): [DatasetTransfer!]!
  datasets(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Dataset_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Dataset_filter
  ): [Dataset!]!
  deal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Deal
  dealEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): DealEvent
  dealEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: DealEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: DealEvent_filter
  ): [DealEvent!]!
  deals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Deal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Deal_filter
  ): [Deal!]!
  erc1538CommitMessage(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538CommitMessage
  erc1538CommitMessages(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538CommitMessage_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538CommitMessage_filter
  ): [ERC1538CommitMessage!]!
  erc1538Event(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Event
  erc1538Events(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Event_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Event_filter
  ): [ERC1538Event!]!
  erc1538Function(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Function
  erc1538FunctionUpdate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538FunctionUpdate
  erc1538FunctionUpdates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538FunctionUpdate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538FunctionUpdate_filter
  ): [ERC1538FunctionUpdate!]!
  erc1538Functions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Function_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Function_filter
  ): [ERC1538Function!]!
  erc1538Module(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): ERC1538Module
  erc1538Modules(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: ERC1538Module_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: ERC1538Module_filter
  ): [ERC1538Module!]!
  faultyContribution(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FaultyContribution
  faultyContributions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: FaultyContribution_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: FaultyContribution_filter
  ): [FaultyContribution!]!
  lock(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Lock
  locks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Lock_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Lock_filter
  ): [Lock!]!
  ordersMatched(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): OrdersMatched
  ordersMatcheds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: OrdersMatched_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: OrdersMatched_filter
  ): [OrdersMatched!]!
  policyUpdate(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): PolicyUpdate
  policyUpdates(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: PolicyUpdate_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: PolicyUpdate_filter
  ): [PolicyUpdate!]!
  protocol(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Protocol
  protocols(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Protocol_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Protocol_filter
  ): [Protocol!]!
  requestOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RequestOrder
  requestOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RequestOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RequestOrder_filter
  ): [RequestOrder!]!
  ressource(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Ressource
  ressourceTransferEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): RessourceTransferEvent
  ressourceTransferEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: RessourceTransferEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: RessourceTransferEvent_filter
  ): [RessourceTransferEvent!]!
  ressources(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Ressource_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Ressource_filter
  ): [Ressource!]!
  reward(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Reward
  rewards(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Reward_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Reward_filter
  ): [Reward!]!
  schedulerNotice(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): SchedulerNotice
  schedulerNotices(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: SchedulerNotice_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: SchedulerNotice_filter
  ): [SchedulerNotice!]!
  seize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Seize
  seizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Seize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Seize_filter
  ): [Seize!]!
  task(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Task
  taskClaimed(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskClaimed
  taskClaimeds(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskClaimed_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskClaimed_filter
  ): [TaskClaimed!]!
  taskConsensus(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskConsensus
  taskConsensuses(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskConsensus_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskConsensus_filter
  ): [TaskConsensus!]!
  taskContribute(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskContribute
  taskContributes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskContribute_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskContribute_filter
  ): [TaskContribute!]!
  taskEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskEvent
  taskEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskEvent_filter
  ): [TaskEvent!]!
  taskFinalize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskFinalize
  taskFinalizes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskFinalize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskFinalize_filter
  ): [TaskFinalize!]!
  taskInitialize(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskInitialize
  taskInitializes(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskInitialize_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskInitialize_filter
  ): [TaskInitialize!]!
  taskReopen(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReopen
  taskReopens(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskReopen_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskReopen_filter
  ): [TaskReopen!]!
  taskReveal(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): TaskReveal
  taskReveals(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: TaskReveal_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: TaskReveal_filter
  ): [TaskReveal!]!
  tasks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Task_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Task_filter
  ): [Task!]!
  transaction(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transaction
  transactions(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transaction_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transaction_filter
  ): [Transaction!]!
  transfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Transfer
  transfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Transfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Transfer_filter
  ): [Transfer!]!
  unlock(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Unlock
  unlocks(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Unlock_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Unlock_filter
  ): [Unlock!]!
  workerpool(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): Workerpool
  workerpoolEvent(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolEvent
  workerpoolEvents(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolEvent_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolEvent_filter
  ): [WorkerpoolEvent!]!
  workerpoolOrder(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolOrder
  workerpoolOrders(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolOrder_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolOrder_filter
  ): [WorkerpoolOrder!]!
  workerpoolTransfer(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    id: ID!
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): WorkerpoolTransfer
  workerpoolTransfers(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: WorkerpoolTransfer_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: WorkerpoolTransfer_filter
  ): [WorkerpoolTransfer!]!
  workerpools(
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    first: Int = 100
    orderBy: Workerpool_orderBy
    orderDirection: OrderDirection
    skip: Int = 0
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
    where: Workerpool_filter
  ): [Workerpool!]!
}

type Task {
  consensus: Bytes
  contributionDeadline: BigInt!
  contributions(first: Int = 100, orderBy: Contribution_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Contribution_filter): [Contribution!]!
  deal: Deal!
  events(first: Int = 100, orderBy: TaskEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TaskEvent_filter): [TaskEvent!]!
  finalDeadline: BigInt!
  id: ID!
  index: BigInt!
  requester: Account!
  resultDigest: Bytes
  results: String
  resultsCallback: String
  revealDeadline: BigInt
  rewards(first: Int = 100, orderBy: Reward_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Reward_filter): [Reward!]!
  seizes(first: Int = 100, orderBy: Seize_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Seize_filter): [Seize!]!
  status: TaskStatus!
  timestamp: BigInt!
}

type TaskClaimed implements TaskEvent {
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
}

input TaskClaimed_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskClaimed_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskClaimed_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TaskClaimed_orderBy {
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type TaskConsensus implements TaskEvent {
  consensus: Bytes!
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
}

input TaskConsensus_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskConsensus_filter]
  consensus: Bytes
  consensus_contains: Bytes
  consensus_gt: Bytes
  consensus_gte: Bytes
  consensus_in: [Bytes!]
  consensus_lt: Bytes
  consensus_lte: Bytes
  consensus_not: Bytes
  consensus_not_contains: Bytes
  consensus_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskConsensus_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TaskConsensus_orderBy {
  consensus
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type TaskContribute implements TaskEvent {
  hash: Bytes!
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
  worker: Account!
}

input TaskContribute_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskContribute_filter]
  hash: Bytes
  hash_contains: Bytes
  hash_gt: Bytes
  hash_gte: Bytes
  hash_in: [Bytes!]
  hash_lt: Bytes
  hash_lte: Bytes
  hash_not: Bytes
  hash_not_contains: Bytes
  hash_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskContribute_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  worker: String
  worker_: Account_filter
  worker_contains: String
  worker_contains_nocase: String
  worker_ends_with: String
  worker_ends_with_nocase: String
  worker_gt: String
  worker_gte: String
  worker_in: [String!]
  worker_lt: String
  worker_lte: String
  worker_not: String
  worker_not_contains: String
  worker_not_contains_nocase: String
  worker_not_ends_with: String
  worker_not_ends_with_nocase: String
  worker_not_in: [String!]
  worker_not_starts_with: String
  worker_not_starts_with_nocase: String
  worker_starts_with: String
  worker_starts_with_nocase: String
}

enum TaskContribute_orderBy {
  hash
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  worker
  worker__balance
  worker__frozen
  worker__id
  worker__score
}

interface TaskEvent {
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
}

input TaskEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskEvent_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskEvent_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TaskEvent_orderBy {
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type TaskFinalize implements TaskEvent {
  id: ID!
  results: Bytes!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
}

input TaskFinalize_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskFinalize_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskFinalize_filter]
  results: Bytes
  results_contains: Bytes
  results_gt: Bytes
  results_gte: Bytes
  results_in: [Bytes!]
  results_lt: Bytes
  results_lte: Bytes
  results_not: Bytes
  results_not_contains: Bytes
  results_not_in: [Bytes!]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TaskFinalize_orderBy {
  id
  results
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type TaskInitialize implements TaskEvent {
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
  workerpool: Workerpool!
}

input TaskInitialize_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskInitialize_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskInitialize_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
}

enum TaskInitialize_orderBy {
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
}

type TaskReopen implements TaskEvent {
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
}

input TaskReopen_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskReopen_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskReopen_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
}

enum TaskReopen_orderBy {
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
}

type TaskReveal implements TaskEvent {
  digest: Bytes!
  id: ID!
  task: Task!
  timestamp: BigInt!
  transaction: Transaction!
  worker: Account!
}

input TaskReveal_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [TaskReveal_filter]
  digest: Bytes
  digest_contains: Bytes
  digest_gt: Bytes
  digest_gte: Bytes
  digest_in: [Bytes!]
  digest_lt: Bytes
  digest_lte: Bytes
  digest_not: Bytes
  digest_not_contains: Bytes
  digest_not_in: [Bytes!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [TaskReveal_filter]
  task: String
  task_: Task_filter
  task_contains: String
  task_contains_nocase: String
  task_ends_with: String
  task_ends_with_nocase: String
  task_gt: String
  task_gte: String
  task_in: [String!]
  task_lt: String
  task_lte: String
  task_not: String
  task_not_contains: String
  task_not_contains_nocase: String
  task_not_ends_with: String
  task_not_ends_with_nocase: String
  task_not_in: [String!]
  task_not_starts_with: String
  task_not_starts_with_nocase: String
  task_starts_with: String
  task_starts_with_nocase: String
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  worker: String
  worker_: Account_filter
  worker_contains: String
  worker_contains_nocase: String
  worker_ends_with: String
  worker_ends_with_nocase: String
  worker_gt: String
  worker_gte: String
  worker_in: [String!]
  worker_lt: String
  worker_lte: String
  worker_not: String
  worker_not_contains: String
  worker_not_contains_nocase: String
  worker_not_ends_with: String
  worker_not_ends_with_nocase: String
  worker_not_in: [String!]
  worker_not_starts_with: String
  worker_not_starts_with_nocase: String
  worker_starts_with: String
  worker_starts_with_nocase: String
}

enum TaskReveal_orderBy {
  digest
  id
  task
  task__consensus
  task__contributionDeadline
  task__finalDeadline
  task__id
  task__index
  task__resultDigest
  task__results
  task__resultsCallback
  task__revealDeadline
  task__status
  task__timestamp
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  worker
  worker__balance
  worker__frozen
  worker__id
  worker__score
}

enum TaskStatus {
  ACTIVE
  COMPLETED
  FAILLED
  REVEALING
  UNSET
}

input Task_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Task_filter]
  consensus: Bytes
  consensus_contains: Bytes
  consensus_gt: Bytes
  consensus_gte: Bytes
  consensus_in: [Bytes!]
  consensus_lt: Bytes
  consensus_lte: Bytes
  consensus_not: Bytes
  consensus_not_contains: Bytes
  consensus_not_in: [Bytes!]
  contributionDeadline: BigInt
  contributionDeadline_gt: BigInt
  contributionDeadline_gte: BigInt
  contributionDeadline_in: [BigInt!]
  contributionDeadline_lt: BigInt
  contributionDeadline_lte: BigInt
  contributionDeadline_not: BigInt
  contributionDeadline_not_in: [BigInt!]
  contributions: [String!]
  contributions_: Contribution_filter
  contributions_contains: [String!]
  contributions_contains_nocase: [String!]
  contributions_not: [String!]
  contributions_not_contains: [String!]
  contributions_not_contains_nocase: [String!]
  deal: String
  deal_: Deal_filter
  deal_contains: String
  deal_contains_nocase: String
  deal_ends_with: String
  deal_ends_with_nocase: String
  deal_gt: String
  deal_gte: String
  deal_in: [String!]
  deal_lt: String
  deal_lte: String
  deal_not: String
  deal_not_contains: String
  deal_not_contains_nocase: String
  deal_not_ends_with: String
  deal_not_ends_with_nocase: String
  deal_not_in: [String!]
  deal_not_starts_with: String
  deal_not_starts_with_nocase: String
  deal_starts_with: String
  deal_starts_with_nocase: String
  events_: TaskEvent_filter
  finalDeadline: BigInt
  finalDeadline_gt: BigInt
  finalDeadline_gte: BigInt
  finalDeadline_in: [BigInt!]
  finalDeadline_lt: BigInt
  finalDeadline_lte: BigInt
  finalDeadline_not: BigInt
  finalDeadline_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  index: BigInt
  index_gt: BigInt
  index_gte: BigInt
  index_in: [BigInt!]
  index_lt: BigInt
  index_lte: BigInt
  index_not: BigInt
  index_not_in: [BigInt!]
  or: [Task_filter]
  requester: String
  requester_: Account_filter
  requester_contains: String
  requester_contains_nocase: String
  requester_ends_with: String
  requester_ends_with_nocase: String
  requester_gt: String
  requester_gte: String
  requester_in: [String!]
  requester_lt: String
  requester_lte: String
  requester_not: String
  requester_not_contains: String
  requester_not_contains_nocase: String
  requester_not_ends_with: String
  requester_not_ends_with_nocase: String
  requester_not_in: [String!]
  requester_not_starts_with: String
  requester_not_starts_with_nocase: String
  requester_starts_with: String
  requester_starts_with_nocase: String
  resultDigest: Bytes
  resultDigest_contains: Bytes
  resultDigest_gt: Bytes
  resultDigest_gte: Bytes
  resultDigest_in: [Bytes!]
  resultDigest_lt: Bytes
  resultDigest_lte: Bytes
  resultDigest_not: Bytes
  resultDigest_not_contains: Bytes
  resultDigest_not_in: [Bytes!]
  results: String
  resultsCallback: String
  resultsCallback_contains: String
  resultsCallback_contains_nocase: String
  resultsCallback_ends_with: String
  resultsCallback_ends_with_nocase: String
  resultsCallback_gt: String
  resultsCallback_gte: String
  resultsCallback_in: [String!]
  resultsCallback_lt: String
  resultsCallback_lte: String
  resultsCallback_not: String
  resultsCallback_not_contains: String
  resultsCallback_not_contains_nocase: String
  resultsCallback_not_ends_with: String
  resultsCallback_not_ends_with_nocase: String
  resultsCallback_not_in: [String!]
  resultsCallback_not_starts_with: String
  resultsCallback_not_starts_with_nocase: String
  resultsCallback_starts_with: String
  resultsCallback_starts_with_nocase: String
  results_contains: String
  results_contains_nocase: String
  results_ends_with: String
  results_ends_with_nocase: String
  results_gt: String
  results_gte: String
  results_in: [String!]
  results_lt: String
  results_lte: String
  results_not: String
  results_not_contains: String
  results_not_contains_nocase: String
  results_not_ends_with: String
  results_not_ends_with_nocase: String
  results_not_in: [String!]
  results_not_starts_with: String
  results_not_starts_with_nocase: String
  results_starts_with: String
  results_starts_with_nocase: String
  revealDeadline: BigInt
  revealDeadline_gt: BigInt
  revealDeadline_gte: BigInt
  revealDeadline_in: [BigInt!]
  revealDeadline_lt: BigInt
  revealDeadline_lte: BigInt
  revealDeadline_not: BigInt
  revealDeadline_not_in: [BigInt!]
  rewards_: Reward_filter
  seizes_: Seize_filter
  status: TaskStatus
  status_in: [TaskStatus!]
  status_not: TaskStatus
  status_not_in: [TaskStatus!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
}

enum Task_orderBy {
  consensus
  contributionDeadline
  contributions
  deal
  deal__appPrice
  deal__botFirst
  deal__botSize
  deal__claimedTasksCount
  deal__completedTasksCount
  deal__datasetPrice
  deal__id
  deal__params
  deal__schedulerRewardRatio
  deal__startTime
  deal__tag
  deal__timestamp
  deal__trust
  deal__workerStake
  deal__workerpoolPrice
  events
  finalDeadline
  id
  index
  requester
  requester__balance
  requester__frozen
  requester__id
  requester__score
  resultDigest
  results
  resultsCallback
  revealDeadline
  rewards
  seizes
  status
  timestamp
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type Transaction {
  accountEvents(first: Int = 100, orderBy: AccountEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: AccountEvent_filter): [AccountEvent!]!
  blockNumber: BigInt!
  erc1538Events(first: Int = 100, orderBy: ERC1538Event_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: ERC1538Event_filter): [ERC1538Event!]!
  from: Account
  gasLimit: BigInt!
  gasPrice: BigInt!
  gasUsed: BigInt!
  id: ID!
  ressourceTransferEvent(first: Int = 100, orderBy: RessourceTransferEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: RessourceTransferEvent_filter): [RessourceTransferEvent!]!
  taskEvents(first: Int = 100, orderBy: TaskEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: TaskEvent_filter): [TaskEvent!]!
  timestamp: BigInt!
  to: Account
  value: BigInt!
  workerpoolEvents(first: Int = 100, orderBy: WorkerpoolEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WorkerpoolEvent_filter): [WorkerpoolEvent!]!
}

input Transaction_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  accountEvents_: AccountEvent_filter
  and: [Transaction_filter]
  blockNumber: BigInt
  blockNumber_gt: BigInt
  blockNumber_gte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_lt: BigInt
  blockNumber_lte: BigInt
  blockNumber_not: BigInt
  blockNumber_not_in: [BigInt!]
  erc1538Events_: ERC1538Event_filter
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  gasLimit: BigInt
  gasLimit_gt: BigInt
  gasLimit_gte: BigInt
  gasLimit_in: [BigInt!]
  gasLimit_lt: BigInt
  gasLimit_lte: BigInt
  gasLimit_not: BigInt
  gasLimit_not_in: [BigInt!]
  gasPrice: BigInt
  gasPrice_gt: BigInt
  gasPrice_gte: BigInt
  gasPrice_in: [BigInt!]
  gasPrice_lt: BigInt
  gasPrice_lte: BigInt
  gasPrice_not: BigInt
  gasPrice_not_in: [BigInt!]
  gasUsed: BigInt
  gasUsed_gt: BigInt
  gasUsed_gte: BigInt
  gasUsed_in: [BigInt!]
  gasUsed_lt: BigInt
  gasUsed_lte: BigInt
  gasUsed_not: BigInt
  gasUsed_not_in: [BigInt!]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Transaction_filter]
  ressourceTransferEvent_: RessourceTransferEvent_filter
  taskEvents_: TaskEvent_filter
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  value: BigInt
  value_gt: BigInt
  value_gte: BigInt
  value_in: [BigInt!]
  value_lt: BigInt
  value_lte: BigInt
  value_not: BigInt
  value_not_in: [BigInt!]
  workerpoolEvents_: WorkerpoolEvent_filter
}

enum Transaction_orderBy {
  accountEvents
  blockNumber
  erc1538Events
  from
  from__balance
  from__frozen
  from__id
  from__score
  gasLimit
  gasPrice
  gasUsed
  id
  ressourceTransferEvent
  taskEvents
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  value
  workerpoolEvents
}

type Transfer {
  from: Account!
  id: ID!
  timestamp: BigInt!
  to: Account!
  transaction: Transaction!
  value: BigDecimal!
}

input Transfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Transfer_filter]
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Transfer_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  value: BigDecimal
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum Transfer_orderBy {
  from
  from__balance
  from__frozen
  from__id
  from__score
  id
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  value
}

type Unlock implements AccountEvent {
  account: Account!
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  value: BigDecimal!
}

input Unlock_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  account: String
  account_: Account_filter
  account_contains: String
  account_contains_nocase: String
  account_ends_with: String
  account_ends_with_nocase: String
  account_gt: String
  account_gte: String
  account_in: [String!]
  account_lt: String
  account_lte: String
  account_not: String
  account_not_contains: String
  account_not_contains_nocase: String
  account_not_ends_with: String
  account_not_ends_with_nocase: String
  account_not_in: [String!]
  account_not_starts_with: String
  account_not_starts_with_nocase: String
  account_starts_with: String
  account_starts_with_nocase: String
  and: [Unlock_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Unlock_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  value: BigDecimal
  value_gt: BigDecimal
  value_gte: BigDecimal
  value_in: [BigDecimal!]
  value_lt: BigDecimal
  value_lte: BigDecimal
  value_not: BigDecimal
  value_not_in: [BigDecimal!]
}

enum Unlock_orderBy {
  account
  account__balance
  account__frozen
  account__id
  account__score
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  value
}

type Workerpool implements Ressource {
  description: String!
  events(first: Int = 100, orderBy: WorkerpoolEvent_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WorkerpoolEvent_filter): [WorkerpoolEvent!]!
  id: ID!
  orders(first: Int = 100, orderBy: WorkerpoolOrder_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WorkerpoolOrder_filter): [WorkerpoolOrder!]!
  owner: Account!
  schedulerRewardRatio: BigInt!
  timestamp: BigInt!
  transfers(first: Int = 100, orderBy: WorkerpoolTransfer_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: WorkerpoolTransfer_filter): [WorkerpoolTransfer!]!
  usages(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  workerStakeRatio: BigInt!
}

interface WorkerpoolEvent {
  id: ID!
  timestamp: BigInt!
  transaction: Transaction!
  workerpool: Workerpool!
}

input WorkerpoolEvent_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WorkerpoolEvent_filter]
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [WorkerpoolEvent_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
}

enum WorkerpoolEvent_orderBy {
  id
  timestamp
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
}

type WorkerpoolOrder {
  apprestrict: Bytes
  category: Category
  datasetrestrict: Bytes
  deals(first: Int = 100, orderBy: Deal_orderBy, orderDirection: OrderDirection, skip: Int = 0, where: Deal_filter): [Deal!]!
  id: ID!
  requesterrestrict: Bytes
  salt: Bytes
  sign: Bytes
  tag: Bytes
  trust: BigInt
  volume: BigInt
  workerpool: Workerpool!
  workerpoolprice: BigDecimal!
}

input WorkerpoolOrder_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WorkerpoolOrder_filter]
  apprestrict: Bytes
  apprestrict_contains: Bytes
  apprestrict_gt: Bytes
  apprestrict_gte: Bytes
  apprestrict_in: [Bytes!]
  apprestrict_lt: Bytes
  apprestrict_lte: Bytes
  apprestrict_not: Bytes
  apprestrict_not_contains: Bytes
  apprestrict_not_in: [Bytes!]
  category: String
  category_: Category_filter
  category_contains: String
  category_contains_nocase: String
  category_ends_with: String
  category_ends_with_nocase: String
  category_gt: String
  category_gte: String
  category_in: [String!]
  category_lt: String
  category_lte: String
  category_not: String
  category_not_contains: String
  category_not_contains_nocase: String
  category_not_ends_with: String
  category_not_ends_with_nocase: String
  category_not_in: [String!]
  category_not_starts_with: String
  category_not_starts_with_nocase: String
  category_starts_with: String
  category_starts_with_nocase: String
  datasetrestrict: Bytes
  datasetrestrict_contains: Bytes
  datasetrestrict_gt: Bytes
  datasetrestrict_gte: Bytes
  datasetrestrict_in: [Bytes!]
  datasetrestrict_lt: Bytes
  datasetrestrict_lte: Bytes
  datasetrestrict_not: Bytes
  datasetrestrict_not_contains: Bytes
  datasetrestrict_not_in: [Bytes!]
  deals_: Deal_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [WorkerpoolOrder_filter]
  requesterrestrict: Bytes
  requesterrestrict_contains: Bytes
  requesterrestrict_gt: Bytes
  requesterrestrict_gte: Bytes
  requesterrestrict_in: [Bytes!]
  requesterrestrict_lt: Bytes
  requesterrestrict_lte: Bytes
  requesterrestrict_not: Bytes
  requesterrestrict_not_contains: Bytes
  requesterrestrict_not_in: [Bytes!]
  salt: Bytes
  salt_contains: Bytes
  salt_gt: Bytes
  salt_gte: Bytes
  salt_in: [Bytes!]
  salt_lt: Bytes
  salt_lte: Bytes
  salt_not: Bytes
  salt_not_contains: Bytes
  salt_not_in: [Bytes!]
  sign: Bytes
  sign_contains: Bytes
  sign_gt: Bytes
  sign_gte: Bytes
  sign_in: [Bytes!]
  sign_lt: Bytes
  sign_lte: Bytes
  sign_not: Bytes
  sign_not_contains: Bytes
  sign_not_in: [Bytes!]
  tag: Bytes
  tag_contains: Bytes
  tag_gt: Bytes
  tag_gte: Bytes
  tag_in: [Bytes!]
  tag_lt: Bytes
  tag_lte: Bytes
  tag_not: Bytes
  tag_not_contains: Bytes
  tag_not_in: [Bytes!]
  trust: BigInt
  trust_gt: BigInt
  trust_gte: BigInt
  trust_in: [BigInt!]
  trust_lt: BigInt
  trust_lte: BigInt
  trust_not: BigInt
  trust_not_in: [BigInt!]
  volume: BigInt
  volume_gt: BigInt
  volume_gte: BigInt
  volume_in: [BigInt!]
  volume_lt: BigInt
  volume_lte: BigInt
  volume_not: BigInt
  volume_not_in: [BigInt!]
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
  workerpoolprice: BigDecimal
  workerpoolprice_gt: BigDecimal
  workerpoolprice_gte: BigDecimal
  workerpoolprice_in: [BigDecimal!]
  workerpoolprice_lt: BigDecimal
  workerpoolprice_lte: BigDecimal
  workerpoolprice_not: BigDecimal
  workerpoolprice_not_in: [BigDecimal!]
}

enum WorkerpoolOrder_orderBy {
  apprestrict
  category
  category__description
  category__id
  category__name
  category__timestamp
  category__workClockTimeRef
  datasetrestrict
  deals
  id
  requesterrestrict
  salt
  sign
  tag
  trust
  volume
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
  workerpoolprice
}

type WorkerpoolTransfer implements RessourceTransferEvent {
  from: Account!
  id: ID!
  timestamp: BigInt!
  to: Account!
  transaction: Transaction!
  workerpool: Workerpool!
}

input WorkerpoolTransfer_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [WorkerpoolTransfer_filter]
  from: String
  from_: Account_filter
  from_contains: String
  from_contains_nocase: String
  from_ends_with: String
  from_ends_with_nocase: String
  from_gt: String
  from_gte: String
  from_in: [String!]
  from_lt: String
  from_lte: String
  from_not: String
  from_not_contains: String
  from_not_contains_nocase: String
  from_not_ends_with: String
  from_not_ends_with_nocase: String
  from_not_in: [String!]
  from_not_starts_with: String
  from_not_starts_with_nocase: String
  from_starts_with: String
  from_starts_with_nocase: String
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [WorkerpoolTransfer_filter]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  to: String
  to_: Account_filter
  to_contains: String
  to_contains_nocase: String
  to_ends_with: String
  to_ends_with_nocase: String
  to_gt: String
  to_gte: String
  to_in: [String!]
  to_lt: String
  to_lte: String
  to_not: String
  to_not_contains: String
  to_not_contains_nocase: String
  to_not_ends_with: String
  to_not_ends_with_nocase: String
  to_not_in: [String!]
  to_not_starts_with: String
  to_not_starts_with_nocase: String
  to_starts_with: String
  to_starts_with_nocase: String
  transaction: String
  transaction_: Transaction_filter
  transaction_contains: String
  transaction_contains_nocase: String
  transaction_ends_with: String
  transaction_ends_with_nocase: String
  transaction_gt: String
  transaction_gte: String
  transaction_in: [String!]
  transaction_lt: String
  transaction_lte: String
  transaction_not: String
  transaction_not_contains: String
  transaction_not_contains_nocase: String
  transaction_not_ends_with: String
  transaction_not_ends_with_nocase: String
  transaction_not_in: [String!]
  transaction_not_starts_with: String
  transaction_not_starts_with_nocase: String
  transaction_starts_with: String
  transaction_starts_with_nocase: String
  workerpool: String
  workerpool_: Workerpool_filter
  workerpool_contains: String
  workerpool_contains_nocase: String
  workerpool_ends_with: String
  workerpool_ends_with_nocase: String
  workerpool_gt: String
  workerpool_gte: String
  workerpool_in: [String!]
  workerpool_lt: String
  workerpool_lte: String
  workerpool_not: String
  workerpool_not_contains: String
  workerpool_not_contains_nocase: String
  workerpool_not_ends_with: String
  workerpool_not_ends_with_nocase: String
  workerpool_not_in: [String!]
  workerpool_not_starts_with: String
  workerpool_not_starts_with_nocase: String
  workerpool_starts_with: String
  workerpool_starts_with_nocase: String
}

enum WorkerpoolTransfer_orderBy {
  from
  from__balance
  from__frozen
  from__id
  from__score
  id
  timestamp
  to
  to__balance
  to__frozen
  to__id
  to__score
  transaction
  transaction__blockNumber
  transaction__gasLimit
  transaction__gasPrice
  transaction__gasUsed
  transaction__id
  transaction__timestamp
  transaction__value
  workerpool
  workerpool__description
  workerpool__id
  workerpool__schedulerRewardRatio
  workerpool__timestamp
  workerpool__workerStakeRatio
}

input Workerpool_filter {
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [Workerpool_filter]
  description: String
  description_contains: String
  description_contains_nocase: String
  description_ends_with: String
  description_ends_with_nocase: String
  description_gt: String
  description_gte: String
  description_in: [String!]
  description_lt: String
  description_lte: String
  description_not: String
  description_not_contains: String
  description_not_contains_nocase: String
  description_not_ends_with: String
  description_not_ends_with_nocase: String
  description_not_in: [String!]
  description_not_starts_with: String
  description_not_starts_with_nocase: String
  description_starts_with: String
  description_starts_with_nocase: String
  events_: WorkerpoolEvent_filter
  id: ID
  id_gt: ID
  id_gte: ID
  id_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_not: ID
  id_not_in: [ID!]
  or: [Workerpool_filter]
  orders_: WorkerpoolOrder_filter
  owner: String
  owner_: Account_filter
  owner_contains: String
  owner_contains_nocase: String
  owner_ends_with: String
  owner_ends_with_nocase: String
  owner_gt: String
  owner_gte: String
  owner_in: [String!]
  owner_lt: String
  owner_lte: String
  owner_not: String
  owner_not_contains: String
  owner_not_contains_nocase: String
  owner_not_ends_with: String
  owner_not_ends_with_nocase: String
  owner_not_in: [String!]
  owner_not_starts_with: String
  owner_not_starts_with_nocase: String
  owner_starts_with: String
  owner_starts_with_nocase: String
  schedulerRewardRatio: BigInt
  schedulerRewardRatio_gt: BigInt
  schedulerRewardRatio_gte: BigInt
  schedulerRewardRatio_in: [BigInt!]
  schedulerRewardRatio_lt: BigInt
  schedulerRewardRatio_lte: BigInt
  schedulerRewardRatio_not: BigInt
  schedulerRewardRatio_not_in: [BigInt!]
  timestamp: BigInt
  timestamp_gt: BigInt
  timestamp_gte: BigInt
  timestamp_in: [BigInt!]
  timestamp_lt: BigInt
  timestamp_lte: BigInt
  timestamp_not: BigInt
  timestamp_not_in: [BigInt!]
  transfers_: WorkerpoolTransfer_filter
  usages_: Deal_filter
  workerStakeRatio: BigInt
  workerStakeRatio_gt: BigInt
  workerStakeRatio_gte: BigInt
  workerStakeRatio_in: [BigInt!]
  workerStakeRatio_lt: BigInt
  workerStakeRatio_lte: BigInt
  workerStakeRatio_not: BigInt
  workerStakeRatio_not_in: [BigInt!]
}

enum Workerpool_orderBy {
  description
  events
  id
  orders
  owner
  owner__balance
  owner__frozen
  owner__id
  owner__score
  schedulerRewardRatio
  timestamp
  transfers
  usages
  workerStakeRatio
}

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """The hash of the parent block"""
  parentHash: Bytes
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}