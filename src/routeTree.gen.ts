/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as WorkerpoolsImport } from './routes/workerpools'
import { Route as TasksImport } from './routes/tasks'
import { Route as DealsImport } from './routes/deals'
import { Route as DatasetsImport } from './routes/datasets'
import { Route as AppsImport } from './routes/apps'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const WorkerpoolsRoute = WorkerpoolsImport.update({
  id: '/workerpools',
  path: '/workerpools',
  getParentRoute: () => rootRoute,
} as any)

const TasksRoute = TasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => rootRoute,
} as any)

const DealsRoute = DealsImport.update({
  id: '/deals',
  path: '/deals',
  getParentRoute: () => rootRoute,
} as any)

const DatasetsRoute = DatasetsImport.update({
  id: '/datasets',
  path: '/datasets',
  getParentRoute: () => rootRoute,
} as any)

const AppsRoute = AppsImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/apps': {
      id: '/apps'
      path: '/apps'
      fullPath: '/apps'
      preLoaderRoute: typeof AppsImport
      parentRoute: typeof rootRoute
    }
    '/datasets': {
      id: '/datasets'
      path: '/datasets'
      fullPath: '/datasets'
      preLoaderRoute: typeof DatasetsImport
      parentRoute: typeof rootRoute
    }
    '/deals': {
      id: '/deals'
      path: '/deals'
      fullPath: '/deals'
      preLoaderRoute: typeof DealsImport
      parentRoute: typeof rootRoute
    }
    '/tasks': {
      id: '/tasks'
      path: '/tasks'
      fullPath: '/tasks'
      preLoaderRoute: typeof TasksImport
      parentRoute: typeof rootRoute
    }
    '/workerpools': {
      id: '/workerpools'
      path: '/workerpools'
      fullPath: '/workerpools'
      preLoaderRoute: typeof WorkerpoolsImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/apps': typeof AppsRoute
  '/datasets': typeof DatasetsRoute
  '/deals': typeof DealsRoute
  '/tasks': typeof TasksRoute
  '/workerpools': typeof WorkerpoolsRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/apps': typeof AppsRoute
  '/datasets': typeof DatasetsRoute
  '/deals': typeof DealsRoute
  '/tasks': typeof TasksRoute
  '/workerpools': typeof WorkerpoolsRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/apps': typeof AppsRoute
  '/datasets': typeof DatasetsRoute
  '/deals': typeof DealsRoute
  '/tasks': typeof TasksRoute
  '/workerpools': typeof WorkerpoolsRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/apps' | '/datasets' | '/deals' | '/tasks' | '/workerpools'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/apps' | '/datasets' | '/deals' | '/tasks' | '/workerpools'
  id:
    | '__root__'
    | '/'
    | '/apps'
    | '/datasets'
    | '/deals'
    | '/tasks'
    | '/workerpools'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AppsRoute: typeof AppsRoute
  DatasetsRoute: typeof DatasetsRoute
  DealsRoute: typeof DealsRoute
  TasksRoute: typeof TasksRoute
  WorkerpoolsRoute: typeof WorkerpoolsRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AppsRoute: AppsRoute,
  DatasetsRoute: DatasetsRoute,
  DealsRoute: DealsRoute,
  TasksRoute: TasksRoute,
  WorkerpoolsRoute: WorkerpoolsRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/apps",
        "/datasets",
        "/deals",
        "/tasks",
        "/workerpools"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/apps": {
      "filePath": "apps.tsx"
    },
    "/datasets": {
      "filePath": "datasets.tsx"
    },
    "/deals": {
      "filePath": "deals.tsx"
    },
    "/tasks": {
      "filePath": "tasks.tsx"
    },
    "/workerpools": {
      "filePath": "workerpools.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
