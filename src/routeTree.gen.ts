/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ChainSlugLayoutImport } from './routes/$chainSlug/_layout'
import { Route as ChainSlugLayoutIndexImport } from './routes/$chainSlug/_layout/index'
import { Route as ChainSlugLayoutWorkerpoolsImport } from './routes/$chainSlug/_layout/workerpools'
import { Route as ChainSlugLayoutTasksImport } from './routes/$chainSlug/_layout/tasks'
import { Route as ChainSlugLayoutDealsImport } from './routes/$chainSlug/_layout/deals'
import { Route as ChainSlugLayoutDatasetsImport } from './routes/$chainSlug/_layout/datasets'
import { Route as ChainSlugLayoutAppsImport } from './routes/$chainSlug/_layout/apps'
import { Route as ChainSlugLayoutDealDealAddressImport } from './routes/$chainSlug/_layout/deal/$dealAddress'

// Create Virtual Routes

const ChainSlugImport = createFileRoute('/$chainSlug')()

// Create/Update Routes

const ChainSlugRoute = ChainSlugImport.update({
  id: '/$chainSlug',
  path: '/$chainSlug',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ChainSlugLayoutRoute = ChainSlugLayoutImport.update({
  id: '/_layout',
  getParentRoute: () => ChainSlugRoute,
} as any)

const ChainSlugLayoutIndexRoute = ChainSlugLayoutIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChainSlugLayoutRoute,
} as any)

const ChainSlugLayoutWorkerpoolsRoute = ChainSlugLayoutWorkerpoolsImport.update(
  {
    id: '/workerpools',
    path: '/workerpools',
    getParentRoute: () => ChainSlugLayoutRoute,
  } as any,
)

const ChainSlugLayoutTasksRoute = ChainSlugLayoutTasksImport.update({
  id: '/tasks',
  path: '/tasks',
  getParentRoute: () => ChainSlugLayoutRoute,
} as any)

const ChainSlugLayoutDealsRoute = ChainSlugLayoutDealsImport.update({
  id: '/deals',
  path: '/deals',
  getParentRoute: () => ChainSlugLayoutRoute,
} as any)

const ChainSlugLayoutDatasetsRoute = ChainSlugLayoutDatasetsImport.update({
  id: '/datasets',
  path: '/datasets',
  getParentRoute: () => ChainSlugLayoutRoute,
} as any)

const ChainSlugLayoutAppsRoute = ChainSlugLayoutAppsImport.update({
  id: '/apps',
  path: '/apps',
  getParentRoute: () => ChainSlugLayoutRoute,
} as any)

const ChainSlugLayoutDealDealAddressRoute =
  ChainSlugLayoutDealDealAddressImport.update({
    id: '/deal/$dealAddress',
    path: '/deal/$dealAddress',
    getParentRoute: () => ChainSlugLayoutRoute,
  } as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/$chainSlug': {
      id: '/$chainSlug'
      path: '/$chainSlug'
      fullPath: '/$chainSlug'
      preLoaderRoute: typeof ChainSlugImport
      parentRoute: typeof rootRoute
    }
    '/$chainSlug/_layout': {
      id: '/$chainSlug/_layout'
      path: '/$chainSlug'
      fullPath: '/$chainSlug'
      preLoaderRoute: typeof ChainSlugLayoutImport
      parentRoute: typeof ChainSlugRoute
    }
    '/$chainSlug/_layout/apps': {
      id: '/$chainSlug/_layout/apps'
      path: '/apps'
      fullPath: '/$chainSlug/apps'
      preLoaderRoute: typeof ChainSlugLayoutAppsImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/datasets': {
      id: '/$chainSlug/_layout/datasets'
      path: '/datasets'
      fullPath: '/$chainSlug/datasets'
      preLoaderRoute: typeof ChainSlugLayoutDatasetsImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/deals': {
      id: '/$chainSlug/_layout/deals'
      path: '/deals'
      fullPath: '/$chainSlug/deals'
      preLoaderRoute: typeof ChainSlugLayoutDealsImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/tasks': {
      id: '/$chainSlug/_layout/tasks'
      path: '/tasks'
      fullPath: '/$chainSlug/tasks'
      preLoaderRoute: typeof ChainSlugLayoutTasksImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/workerpools': {
      id: '/$chainSlug/_layout/workerpools'
      path: '/workerpools'
      fullPath: '/$chainSlug/workerpools'
      preLoaderRoute: typeof ChainSlugLayoutWorkerpoolsImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/': {
      id: '/$chainSlug/_layout/'
      path: '/'
      fullPath: '/$chainSlug/'
      preLoaderRoute: typeof ChainSlugLayoutIndexImport
      parentRoute: typeof ChainSlugLayoutImport
    }
    '/$chainSlug/_layout/deal/$dealAddress': {
      id: '/$chainSlug/_layout/deal/$dealAddress'
      path: '/deal/$dealAddress'
      fullPath: '/$chainSlug/deal/$dealAddress'
      preLoaderRoute: typeof ChainSlugLayoutDealDealAddressImport
      parentRoute: typeof ChainSlugLayoutImport
    }
  }
}

// Create and export the route tree

interface ChainSlugLayoutRouteChildren {
  ChainSlugLayoutAppsRoute: typeof ChainSlugLayoutAppsRoute
  ChainSlugLayoutDatasetsRoute: typeof ChainSlugLayoutDatasetsRoute
  ChainSlugLayoutDealsRoute: typeof ChainSlugLayoutDealsRoute
  ChainSlugLayoutTasksRoute: typeof ChainSlugLayoutTasksRoute
  ChainSlugLayoutWorkerpoolsRoute: typeof ChainSlugLayoutWorkerpoolsRoute
  ChainSlugLayoutIndexRoute: typeof ChainSlugLayoutIndexRoute
  ChainSlugLayoutDealDealAddressRoute: typeof ChainSlugLayoutDealDealAddressRoute
}

const ChainSlugLayoutRouteChildren: ChainSlugLayoutRouteChildren = {
  ChainSlugLayoutAppsRoute: ChainSlugLayoutAppsRoute,
  ChainSlugLayoutDatasetsRoute: ChainSlugLayoutDatasetsRoute,
  ChainSlugLayoutDealsRoute: ChainSlugLayoutDealsRoute,
  ChainSlugLayoutTasksRoute: ChainSlugLayoutTasksRoute,
  ChainSlugLayoutWorkerpoolsRoute: ChainSlugLayoutWorkerpoolsRoute,
  ChainSlugLayoutIndexRoute: ChainSlugLayoutIndexRoute,
  ChainSlugLayoutDealDealAddressRoute: ChainSlugLayoutDealDealAddressRoute,
}

const ChainSlugLayoutRouteWithChildren = ChainSlugLayoutRoute._addFileChildren(
  ChainSlugLayoutRouteChildren,
)

interface ChainSlugRouteChildren {
  ChainSlugLayoutRoute: typeof ChainSlugLayoutRouteWithChildren
}

const ChainSlugRouteChildren: ChainSlugRouteChildren = {
  ChainSlugLayoutRoute: ChainSlugLayoutRouteWithChildren,
}

const ChainSlugRouteWithChildren = ChainSlugRoute._addFileChildren(
  ChainSlugRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$chainSlug': typeof ChainSlugLayoutRouteWithChildren
  '/$chainSlug/apps': typeof ChainSlugLayoutAppsRoute
  '/$chainSlug/datasets': typeof ChainSlugLayoutDatasetsRoute
  '/$chainSlug/deals': typeof ChainSlugLayoutDealsRoute
  '/$chainSlug/tasks': typeof ChainSlugLayoutTasksRoute
  '/$chainSlug/workerpools': typeof ChainSlugLayoutWorkerpoolsRoute
  '/$chainSlug/': typeof ChainSlugLayoutIndexRoute
  '/$chainSlug/deal/$dealAddress': typeof ChainSlugLayoutDealDealAddressRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$chainSlug': typeof ChainSlugLayoutIndexRoute
  '/$chainSlug/apps': typeof ChainSlugLayoutAppsRoute
  '/$chainSlug/datasets': typeof ChainSlugLayoutDatasetsRoute
  '/$chainSlug/deals': typeof ChainSlugLayoutDealsRoute
  '/$chainSlug/tasks': typeof ChainSlugLayoutTasksRoute
  '/$chainSlug/workerpools': typeof ChainSlugLayoutWorkerpoolsRoute
  '/$chainSlug/deal/$dealAddress': typeof ChainSlugLayoutDealDealAddressRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/$chainSlug': typeof ChainSlugRouteWithChildren
  '/$chainSlug/_layout': typeof ChainSlugLayoutRouteWithChildren
  '/$chainSlug/_layout/apps': typeof ChainSlugLayoutAppsRoute
  '/$chainSlug/_layout/datasets': typeof ChainSlugLayoutDatasetsRoute
  '/$chainSlug/_layout/deals': typeof ChainSlugLayoutDealsRoute
  '/$chainSlug/_layout/tasks': typeof ChainSlugLayoutTasksRoute
  '/$chainSlug/_layout/workerpools': typeof ChainSlugLayoutWorkerpoolsRoute
  '/$chainSlug/_layout/': typeof ChainSlugLayoutIndexRoute
  '/$chainSlug/_layout/deal/$dealAddress': typeof ChainSlugLayoutDealDealAddressRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$chainSlug'
    | '/$chainSlug/apps'
    | '/$chainSlug/datasets'
    | '/$chainSlug/deals'
    | '/$chainSlug/tasks'
    | '/$chainSlug/workerpools'
    | '/$chainSlug/'
    | '/$chainSlug/deal/$dealAddress'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$chainSlug'
    | '/$chainSlug/apps'
    | '/$chainSlug/datasets'
    | '/$chainSlug/deals'
    | '/$chainSlug/tasks'
    | '/$chainSlug/workerpools'
    | '/$chainSlug/deal/$dealAddress'
  id:
    | '__root__'
    | '/'
    | '/$chainSlug'
    | '/$chainSlug/_layout'
    | '/$chainSlug/_layout/apps'
    | '/$chainSlug/_layout/datasets'
    | '/$chainSlug/_layout/deals'
    | '/$chainSlug/_layout/tasks'
    | '/$chainSlug/_layout/workerpools'
    | '/$chainSlug/_layout/'
    | '/$chainSlug/_layout/deal/$dealAddress'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ChainSlugRoute: typeof ChainSlugRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ChainSlugRoute: ChainSlugRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/$chainSlug"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/$chainSlug": {
      "filePath": "$chainSlug",
      "children": [
        "/$chainSlug/_layout"
      ]
    },
    "/$chainSlug/_layout": {
      "filePath": "$chainSlug/_layout.tsx",
      "parent": "/$chainSlug",
      "children": [
        "/$chainSlug/_layout/apps",
        "/$chainSlug/_layout/datasets",
        "/$chainSlug/_layout/deals",
        "/$chainSlug/_layout/tasks",
        "/$chainSlug/_layout/workerpools",
        "/$chainSlug/_layout/",
        "/$chainSlug/_layout/deal/$dealAddress"
      ]
    },
    "/$chainSlug/_layout/apps": {
      "filePath": "$chainSlug/_layout/apps.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/datasets": {
      "filePath": "$chainSlug/_layout/datasets.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/deals": {
      "filePath": "$chainSlug/_layout/deals.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/tasks": {
      "filePath": "$chainSlug/_layout/tasks.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/workerpools": {
      "filePath": "$chainSlug/_layout/workerpools.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/": {
      "filePath": "$chainSlug/_layout/index.tsx",
      "parent": "/$chainSlug/_layout"
    },
    "/$chainSlug/_layout/deal/$dealAddress": {
      "filePath": "$chainSlug/_layout/deal/$dealAddress.tsx",
      "parent": "/$chainSlug/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
