/* eslint-disable */
import * as types from './graphql';



/**
 * Map of all GraphQL operations in the project.
 *
 * This map has several performance disadvantages:
 * 1. It is not tree-shakeable, so it will include all operations in the project.
 * 2. It is not minifiable, so the string of a GraphQL query will be multiple times inside the bundle.
 * 3. It does not support dead code elimination, so it will add unused operations.
 *
 * Therefore it is highly recommended to use the babel or swc plugin for production.
 * Learn more about it here: https://the-guild.dev/graphql/codegen/plugins/presets/preset-client#reducing-bundle-size
 */
type Documents = {
    "\n  query Address($address: ID!) {\n    account(id: $address) {\n      address: id\n      staked: balance\n      locked: frozen\n      score\n      allApps: apps(first: 1000) {\n        id\n      }\n      allDatasets: datasets(first: 1000) {\n        id\n      }\n      allWorkerpools: workerpools(first: 1000) {\n        id\n      }\n      allContributions: contributions(first: 1000) {\n        id\n      }\n      allDealRequester: dealRequester(first: 1000) {\n        id\n      }\n      allDealBeneficiary: dealBeneficiary(first: 1000) {\n        id\n      }\n    }\n  }\n": typeof types.AddressDocument,
    "\n  query AddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": typeof types.AddressBeneficiaryDealsDocument,
    "\n  query NextAddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n": typeof types.NextAddressBeneficiaryDealsDocument,
    "\n  query AddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": typeof types.AddressRequestedDealsDocument,
    "\n  query NextAddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": typeof types.NextAddressRequestedDealsDocument,
    "\n  query AddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n        timestamp\n        status\n        finalDeadline\n        deal {\n          dealid: id\n          app {\n            address: id\n            name\n          }\n          dataset {\n            address: id\n            name\n          }\n          workerpool {\n            address: id\n            description\n          }\n        }\n      }\n    }\n  }\n": typeof types.AddressRequestedTasksDocument,
    "\n  query NextAddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n      }\n    }\n  }\n": typeof types.NextAddressRequestedTasksDocument,
    "\n  query AppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": typeof types.AppDealsDocument,
    "\n  query App($appAddress: ID!, $appAddressString: String!) {\n    app(id: $appAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      mrenclave\n      checksum\n      transfers(\n        where: { app: $appAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        app {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.AppDocument,
    "\n  query NextAppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n": typeof types.NextAppDealsDocument,
    "\n  query Apps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      type\n      multiaddr\n      checksum\n      mrenclave\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.AppsDocument,
    "\n  query NextApps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": typeof types.NextAppsDocument,
    "\n  query DatasetDeals($length: Int = 20, $skip: Int = 0, $datasetAddress: ID!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": typeof types.DatasetDealsDocument,
    "\n  query Dataset($datasetAddress: ID!, $datasetAddressString: String!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      checksum\n      transfers(\n        where: { dataset: $datasetAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        dataset {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.DatasetDocument,
    "\n  query NextDatasetDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $datasetAddress: ID!\n  ) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n": typeof types.NextDatasetDealsDocument,
    "\n  query Datasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      multiaddr\n      checksum\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.DatasetsDocument,
    "\n  query NextDatasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": typeof types.NextDatasetsDocument,
    "\n  query Deal($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      dealid: id\n      timestamp\n      startTime\n      app {\n        address: id\n        name\n      }\n      dataset {\n        address: id\n        name\n      }\n      workerpool {\n        address: id\n        description\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      params\n      tag\n      trust\n      category {\n        catid: id\n        name\n        workClockTimeRef\n        description\n      }\n      botSize\n      botFirst\n      completedTasksCount\n      claimedTasksCount\n      requester {\n        address: id\n      }\n      dealEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n      }\n    }\n  }\n": typeof types.DealDocument,
    "\n  query DealTasks($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      tasks(orderBy: index, orderDirection: asc) {\n        taskid: id\n        index\n        status\n        finalDeadline\n      }\n    }\n  }\n": typeof types.DealTasksDocument,
    "\n  query Deals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n      timestamp\n      requester {\n        address: id\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      app {\n        address: id\n      }\n      dataset {\n        address: id\n      }\n      workerpool {\n        address: id\n      }\n      category {\n        catid: id\n        workClockTimeRef\n      }\n      startTime\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      botSize\n      trust\n      completedTasksCount\n      claimedTasksCount\n    }\n  }\n": typeof types.DealsDocument,
    "\n  query NextDeals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n    }\n  }\n": typeof types.NextDealsDocument,
    "\n  query NextTasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n    }\n  }\n": typeof types.NextTasksDocument,
    "\n  query Task($taskAddress: ID!) {\n    task(id: $taskAddress) {\n      taskid: id\n      timestamp\n      deal {\n        dealid: id\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        tag\n        trust\n        category {\n          catid: id\n          name\n          workClockTimeRef\n          description\n        }\n        botSize\n        botFirst\n      }\n      requester {\n        address: id\n      }\n      index\n      status\n      contributionDeadline\n      revealDeadline\n      finalDeadline\n      consensus\n      resultDigest\n      results\n      resultsCallback\n\n      # TODO index in subgraph\n      # contributions(orderBy: timestamp, orderDirection: asc) {\n      #   timestamp\n      #   worker {\n      #     address: id\n      #     score\n      #   }\n      #   hash\n      #   seal\n      #   challenge\n      # }\n\n      taskEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n        # ... on TaskInitialize { } # nothing more\n        ... on TaskContribute {\n          worker {\n            address: id\n          }\n          hash\n        }\n        ... on TaskConsensus {\n          consensus\n        }\n        ... on TaskReveal {\n          digest\n          worker {\n            address: id\n          }\n        }\n        # ... on TaskReopen { } # nothing more\n        ... on TaskFinalize {\n          results\n          # resultsCallback # TODO add in subgraph\n        }\n        # ... on TaskClaimed { } # nothing more\n      }\n    }\n  }\n": typeof types.TaskDocument,
    "\n  query Tasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n      index\n      finalDeadline\n      status\n      timestamp\n      deal {\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        app {\n          address: id\n        }\n        dataset {\n          address: id\n        }\n        workerpool {\n          address: id\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n      }\n    }\n  }\n": typeof types.TasksDocument,
    "\n  query TransactionEvent($transactionAddress: String!) {\n    appTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      app {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    datasetTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      dataset {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    workerpoolTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    rewards(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    seizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    locks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    unlocks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    accurateContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    faultyContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    policyUpdates(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n    }\n    ordersMatcheds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n    }\n    schedulerNotices(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n      workerpool {\n        address: id\n      }\n    }\n    taskInitializes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskContributes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n      worker {\n        address: id\n      }\n    }\n    taskConsensuses(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReveals(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReopens(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskFinalizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskClaimeds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n  }\n": typeof types.TransactionEventDocument,
    "\n  query Transaction($transactionAddress: ID!) {\n    transaction(id: $transactionAddress) {\n      txHash: id\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n      gasLimit\n      gasUsed\n      gasPrice\n    }\n  }\n": typeof types.TransactionDocument,
    "\n  query NextWorkerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": typeof types.NextWorkerpoolsDocument,
    "\n  query NextWorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n": typeof types.NextWorkerpoolDealsDocument,
    "\n  query WorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": typeof types.WorkerpoolDealsDocument,
    "\n  query Workerpool($workerpoolAddress: ID!, $workerpoolAddressString: String!) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      owner {\n        address: id\n      }\n      description\n      transfers(\n        where: { workerpool: $workerpoolAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        workerpool {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.WorkerpoolDocument,
    "\n  query Workerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      description\n      workerStakeRatio\n      schedulerRewardRatio\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": typeof types.WorkerpoolsDocument,
};
const documents: Documents = {
    "\n  query Address($address: ID!) {\n    account(id: $address) {\n      address: id\n      staked: balance\n      locked: frozen\n      score\n      allApps: apps(first: 1000) {\n        id\n      }\n      allDatasets: datasets(first: 1000) {\n        id\n      }\n      allWorkerpools: workerpools(first: 1000) {\n        id\n      }\n      allContributions: contributions(first: 1000) {\n        id\n      }\n      allDealRequester: dealRequester(first: 1000) {\n        id\n      }\n      allDealBeneficiary: dealBeneficiary(first: 1000) {\n        id\n      }\n    }\n  }\n": types.AddressDocument,
    "\n  query AddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": types.AddressBeneficiaryDealsDocument,
    "\n  query NextAddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n": types.NextAddressBeneficiaryDealsDocument,
    "\n  query AddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": types.AddressRequestedDealsDocument,
    "\n  query NextAddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n": types.NextAddressRequestedDealsDocument,
    "\n  query AddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n        timestamp\n        status\n        finalDeadline\n        deal {\n          dealid: id\n          app {\n            address: id\n            name\n          }\n          dataset {\n            address: id\n            name\n          }\n          workerpool {\n            address: id\n            description\n          }\n        }\n      }\n    }\n  }\n": types.AddressRequestedTasksDocument,
    "\n  query NextAddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n      }\n    }\n  }\n": types.NextAddressRequestedTasksDocument,
    "\n  query AppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": types.AppDealsDocument,
    "\n  query App($appAddress: ID!, $appAddressString: String!) {\n    app(id: $appAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      mrenclave\n      checksum\n      transfers(\n        where: { app: $appAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        app {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.AppDocument,
    "\n  query NextAppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n": types.NextAppDealsDocument,
    "\n  query Apps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      type\n      multiaddr\n      checksum\n      mrenclave\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.AppsDocument,
    "\n  query NextApps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": types.NextAppsDocument,
    "\n  query DatasetDeals($length: Int = 20, $skip: Int = 0, $datasetAddress: ID!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": types.DatasetDealsDocument,
    "\n  query Dataset($datasetAddress: ID!, $datasetAddressString: String!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      checksum\n      transfers(\n        where: { dataset: $datasetAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        dataset {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.DatasetDocument,
    "\n  query NextDatasetDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $datasetAddress: ID!\n  ) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n": types.NextDatasetDealsDocument,
    "\n  query Datasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      multiaddr\n      checksum\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.DatasetsDocument,
    "\n  query NextDatasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": types.NextDatasetsDocument,
    "\n  query Deal($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      dealid: id\n      timestamp\n      startTime\n      app {\n        address: id\n        name\n      }\n      dataset {\n        address: id\n        name\n      }\n      workerpool {\n        address: id\n        description\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      params\n      tag\n      trust\n      category {\n        catid: id\n        name\n        workClockTimeRef\n        description\n      }\n      botSize\n      botFirst\n      completedTasksCount\n      claimedTasksCount\n      requester {\n        address: id\n      }\n      dealEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n      }\n    }\n  }\n": types.DealDocument,
    "\n  query DealTasks($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      tasks(orderBy: index, orderDirection: asc) {\n        taskid: id\n        index\n        status\n        finalDeadline\n      }\n    }\n  }\n": types.DealTasksDocument,
    "\n  query Deals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n      timestamp\n      requester {\n        address: id\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      app {\n        address: id\n      }\n      dataset {\n        address: id\n      }\n      workerpool {\n        address: id\n      }\n      category {\n        catid: id\n        workClockTimeRef\n      }\n      startTime\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      botSize\n      trust\n      completedTasksCount\n      claimedTasksCount\n    }\n  }\n": types.DealsDocument,
    "\n  query NextDeals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n    }\n  }\n": types.NextDealsDocument,
    "\n  query NextTasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n    }\n  }\n": types.NextTasksDocument,
    "\n  query Task($taskAddress: ID!) {\n    task(id: $taskAddress) {\n      taskid: id\n      timestamp\n      deal {\n        dealid: id\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        tag\n        trust\n        category {\n          catid: id\n          name\n          workClockTimeRef\n          description\n        }\n        botSize\n        botFirst\n      }\n      requester {\n        address: id\n      }\n      index\n      status\n      contributionDeadline\n      revealDeadline\n      finalDeadline\n      consensus\n      resultDigest\n      results\n      resultsCallback\n\n      # TODO index in subgraph\n      # contributions(orderBy: timestamp, orderDirection: asc) {\n      #   timestamp\n      #   worker {\n      #     address: id\n      #     score\n      #   }\n      #   hash\n      #   seal\n      #   challenge\n      # }\n\n      taskEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n        # ... on TaskInitialize { } # nothing more\n        ... on TaskContribute {\n          worker {\n            address: id\n          }\n          hash\n        }\n        ... on TaskConsensus {\n          consensus\n        }\n        ... on TaskReveal {\n          digest\n          worker {\n            address: id\n          }\n        }\n        # ... on TaskReopen { } # nothing more\n        ... on TaskFinalize {\n          results\n          # resultsCallback # TODO add in subgraph\n        }\n        # ... on TaskClaimed { } # nothing more\n      }\n    }\n  }\n": types.TaskDocument,
    "\n  query Tasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n      index\n      finalDeadline\n      status\n      timestamp\n      deal {\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        app {\n          address: id\n        }\n        dataset {\n          address: id\n        }\n        workerpool {\n          address: id\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n      }\n    }\n  }\n": types.TasksDocument,
    "\n  query TransactionEvent($transactionAddress: String!) {\n    appTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      app {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    datasetTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      dataset {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    workerpoolTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    rewards(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    seizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    locks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    unlocks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    accurateContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    faultyContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    policyUpdates(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n    }\n    ordersMatcheds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n    }\n    schedulerNotices(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n      workerpool {\n        address: id\n      }\n    }\n    taskInitializes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskContributes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n      worker {\n        address: id\n      }\n    }\n    taskConsensuses(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReveals(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReopens(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskFinalizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskClaimeds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n  }\n": types.TransactionEventDocument,
    "\n  query Transaction($transactionAddress: ID!) {\n    transaction(id: $transactionAddress) {\n      txHash: id\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n      gasLimit\n      gasUsed\n      gasPrice\n    }\n  }\n": types.TransactionDocument,
    "\n  query NextWorkerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n": types.NextWorkerpoolsDocument,
    "\n  query NextWorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n": types.NextWorkerpoolDealsDocument,
    "\n  query WorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n": types.WorkerpoolDealsDocument,
    "\n  query Workerpool($workerpoolAddress: ID!, $workerpoolAddressString: String!) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      owner {\n        address: id\n      }\n      description\n      transfers(\n        where: { workerpool: $workerpoolAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        workerpool {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.WorkerpoolDocument,
    "\n  query Workerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      description\n      workerStakeRatio\n      schedulerRewardRatio\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n": types.WorkerpoolsDocument,
};

/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Address($address: ID!) {\n    account(id: $address) {\n      address: id\n      staked: balance\n      locked: frozen\n      score\n      allApps: apps(first: 1000) {\n        id\n      }\n      allDatasets: datasets(first: 1000) {\n        id\n      }\n      allWorkerpools: workerpools(first: 1000) {\n        id\n      }\n      allContributions: contributions(first: 1000) {\n        id\n      }\n      allDealRequester: dealRequester(first: 1000) {\n        id\n      }\n      allDealBeneficiary: dealBeneficiary(first: 1000) {\n        id\n      }\n    }\n  }\n"): typeof import('./graphql').AddressDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AddressBeneficiaryDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextAddressBeneficiaryDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealBeneficiary(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n"): typeof import('./graphql').NextAddressBeneficiaryDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AddressRequestedDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextAddressRequestedDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      dealRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        botSize\n        completedTasksCount\n        claimedTasksCount\n        category {\n          workClockTimeRef\n        }\n        startTime\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').NextAddressRequestedDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n        timestamp\n        status\n        finalDeadline\n        deal {\n          dealid: id\n          app {\n            address: id\n            name\n          }\n          dataset {\n            address: id\n            name\n          }\n          workerpool {\n            address: id\n            description\n          }\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AddressRequestedTasksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextAddressRequestedTasks(\n    $length: Int = 20\n    $skip: Int = 0\n    $address: ID!\n  ) {\n    account(id: $address) {\n      address: id\n      taskRequester(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        taskid: id\n      }\n    }\n  }\n"): typeof import('./graphql').NextAddressRequestedTasksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query AppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n"): typeof import('./graphql').AppDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query App($appAddress: ID!, $appAddressString: String!) {\n    app(id: $appAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      mrenclave\n      checksum\n      transfers(\n        where: { app: $appAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        app {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AppDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextAppDeals($length: Int = 20, $skip: Int = 0, $appAddress: ID!) {\n    app(id: $appAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n      }\n    }\n  }\n"): typeof import('./graphql').NextAppDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Apps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      type\n      multiaddr\n      checksum\n      mrenclave\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').AppsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextApps($length: Int = 20, $skip: Int = 0) {\n    apps(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n"): typeof import('./graphql').NextAppsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DatasetDeals($length: Int = 20, $skip: Int = 0, $datasetAddress: ID!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n"): typeof import('./graphql').DatasetDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Dataset($datasetAddress: ID!, $datasetAddressString: String!) {\n    dataset(id: $datasetAddress) {\n      address: id\n      name\n      owner {\n        address: id\n      }\n      multiaddr\n      checksum\n      transfers(\n        where: { dataset: $datasetAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        dataset {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').DatasetDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextDatasetDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $datasetAddress: ID!\n  ) {\n    dataset(id: $datasetAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n"): typeof import('./graphql').NextDatasetDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Datasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      name\n      multiaddr\n      checksum\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').DatasetsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextDatasets($length: Int = 20, $skip: Int = 0) {\n    datasets(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n"): typeof import('./graphql').NextDatasetsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Deal($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      dealid: id\n      timestamp\n      startTime\n      app {\n        address: id\n        name\n      }\n      dataset {\n        address: id\n        name\n      }\n      workerpool {\n        address: id\n        description\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      params\n      tag\n      trust\n      category {\n        catid: id\n        name\n        workClockTimeRef\n        description\n      }\n      botSize\n      botFirst\n      completedTasksCount\n      claimedTasksCount\n      requester {\n        address: id\n      }\n      dealEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').DealDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query DealTasks($dealAddress: ID!) {\n    deal(id: $dealAddress) {\n      tasks(orderBy: index, orderDirection: asc) {\n        taskid: id\n        index\n        status\n        finalDeadline\n      }\n    }\n  }\n"): typeof import('./graphql').DealTasksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Deals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n      timestamp\n      requester {\n        address: id\n      }\n      beneficiary {\n        address: id\n      }\n      callback {\n        address: id\n      }\n      app {\n        address: id\n      }\n      dataset {\n        address: id\n      }\n      workerpool {\n        address: id\n      }\n      category {\n        catid: id\n        workClockTimeRef\n      }\n      startTime\n      appPrice\n      datasetPrice\n      workerpoolPrice\n      botSize\n      trust\n      completedTasksCount\n      claimedTasksCount\n    }\n  }\n"): typeof import('./graphql').DealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextDeals($length: Int = 20, $skip: Int = 0) {\n    deals(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      dealid: id\n    }\n  }\n"): typeof import('./graphql').NextDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextTasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n    }\n  }\n"): typeof import('./graphql').NextTasksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Task($taskAddress: ID!) {\n    task(id: $taskAddress) {\n      taskid: id\n      timestamp\n      deal {\n        dealid: id\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        tag\n        trust\n        category {\n          catid: id\n          name\n          workClockTimeRef\n          description\n        }\n        botSize\n        botFirst\n      }\n      requester {\n        address: id\n      }\n      index\n      status\n      contributionDeadline\n      revealDeadline\n      finalDeadline\n      consensus\n      resultDigest\n      results\n      resultsCallback\n\n      # TODO index in subgraph\n      # contributions(orderBy: timestamp, orderDirection: asc) {\n      #   timestamp\n      #   worker {\n      #     address: id\n      #     score\n      #   }\n      #   hash\n      #   seal\n      #   challenge\n      # }\n\n      taskEvents: events(orderBy: timestamp, orderDirection: asc) {\n        timestamp\n        id\n        type: __typename\n        transaction {\n          txHash: id\n        }\n        # ... on TaskInitialize { } # nothing more\n        ... on TaskContribute {\n          worker {\n            address: id\n          }\n          hash\n        }\n        ... on TaskConsensus {\n          consensus\n        }\n        ... on TaskReveal {\n          digest\n          worker {\n            address: id\n          }\n        }\n        # ... on TaskReopen { } # nothing more\n        ... on TaskFinalize {\n          results\n          # resultsCallback # TODO add in subgraph\n        }\n        # ... on TaskClaimed { } # nothing more\n      }\n    }\n  }\n"): typeof import('./graphql').TaskDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Tasks($length: Int = 20, $skip: Int = 0) {\n    tasks(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      taskid: id\n      index\n      finalDeadline\n      status\n      timestamp\n      deal {\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        app {\n          address: id\n        }\n        dataset {\n          address: id\n        }\n        workerpool {\n          address: id\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').TasksDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query TransactionEvent($transactionAddress: String!) {\n    appTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      app {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    datasetTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      dataset {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    workerpoolTransfers(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n    }\n    rewards(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    seizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n      task {\n        taskid: id\n      }\n    }\n    locks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    unlocks(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n      value\n    }\n    accurateContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    faultyContributions(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      account {\n        address: id\n      }\n    }\n    policyUpdates(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      workerpool {\n        address: id\n      }\n    }\n    ordersMatcheds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n    }\n    schedulerNotices(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      deal {\n        dealid: id\n      }\n      workerpool {\n        address: id\n      }\n    }\n    taskInitializes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskContributes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n      worker {\n        address: id\n      }\n    }\n    taskConsensuses(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReveals(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskReopens(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskFinalizes(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n    taskClaimeds(where: { transaction: $transactionAddress }) {\n      id\n      type: __typename\n      task {\n        taskid: id\n      }\n    }\n  }\n"): typeof import('./graphql').TransactionEventDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Transaction($transactionAddress: ID!) {\n    transaction(id: $transactionAddress) {\n      txHash: id\n      from {\n        address: id\n      }\n      to {\n        address: id\n      }\n      gasLimit\n      gasUsed\n      gasPrice\n    }\n  }\n"): typeof import('./graphql').TransactionDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextWorkerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n    }\n  }\n"): typeof import('./graphql').NextWorkerpoolsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query NextWorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        first: $length\n        skip: $skip\n        orderBy: timestamp\n        orderDirection: desc\n      ) {\n        dealid: id\n      }\n    }\n  }\n"): typeof import('./graphql').NextWorkerpoolDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query WorkerpoolDeals(\n    $length: Int = 20\n    $skip: Int = 0\n    $workerpoolAddress: ID!\n  ) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      deals: usages(\n        orderBy: timestamp\n        orderDirection: desc\n        first: $length\n        skip: $skip\n      ) {\n        dealid: id\n        timestamp\n        requester {\n          address: id\n        }\n        beneficiary {\n          address: id\n        }\n        callback {\n          address: id\n        }\n        app {\n          address: id\n          name\n        }\n        dataset {\n          address: id\n          name\n        }\n        workerpool {\n          address: id\n          description\n        }\n        category {\n          catid: id\n          workClockTimeRef\n        }\n        startTime\n        appPrice\n        datasetPrice\n        workerpoolPrice\n        botSize\n        trust\n        completedTasksCount\n        claimedTasksCount\n      }\n    }\n  }\n"): typeof import('./graphql').WorkerpoolDealsDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Workerpool($workerpoolAddress: ID!, $workerpoolAddressString: String!) {\n    workerpool(id: $workerpoolAddress) {\n      address: id\n      owner {\n        address: id\n      }\n      description\n      transfers(\n        where: { workerpool: $workerpoolAddressString }\n        orderBy: timestamp\n        orderDirection: asc\n      ) {\n        workerpool {\n          address: id\n        }\n        from {\n          address: id\n        }\n        to {\n          address: id\n        }\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').WorkerpoolDocument;
/**
 * The graphql function is used to parse GraphQL queries into a document that can be used by GraphQL clients.
 */
export function graphql(source: "\n  query Workerpools($length: Int = 20, $skip: Int = 0) {\n    workerpools(\n      first: $length\n      skip: $skip\n      orderBy: timestamp\n      orderDirection: desc\n    ) {\n      address: id\n      owner {\n        address: id\n      }\n      timestamp\n      description\n      workerStakeRatio\n      schedulerRewardRatio\n      transfers(orderBy: timestamp, orderDirection: desc) {\n        transaction {\n          txHash: id\n          timestamp\n          blockNumber\n        }\n      }\n    }\n  }\n"): typeof import('./graphql').WorkerpoolsDocument;


export function graphql(source: string) {
  return (documents as any)[source] ?? {};
}
